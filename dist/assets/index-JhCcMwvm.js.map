{"version":3,"file":"index-JhCcMwvm.js","sources":["../../src/main.js"],"sourcesContent":["// Remove the import since we're loading Phaser via CDN\n// import Phaser from 'phaser';\n\n// Boot Scene - Loads assets\nclass BootScene extends Phaser.Scene {\n    constructor() {\n        super({ key: 'BootScene' });\n        console.log('BootScene constructor called');\n    }\n\n    preload() {\n        console.log('Starting to load assets...');\n        \n        // Add load progress handler\n        this.load.on('progress', (value) => {\n            console.log('Loading progress:', Math.round(value * 100) + '%');\n        });\n\n        // Load game assets\n        this.load.image('balloon', 'assets/balloon.png');\n        this.load.image('arrow', 'assets/arrow.svg');\n        this.load.image('heart', 'assets/heart.png');\n        this.load.image('heart-empty', 'assets/brokenheart.png');\n        this.load.image('startscreen', 'assets/startscreen.jpg');\n        this.load.audio('pop', 'assets/pop.mp3');\n        this.load.audio('success', 'assets/success.mp3');\n        this.load.audio('win', 'assets/win.mp3');\n        // Load words from JSON file\n        this.load.json('wordList', 'assets/words.json');\n\n        // Add load complete handler\n        this.load.on('complete', () => {\n            console.log('All assets loaded successfully!');\n            // Log all available textures\n            console.log('Available textures:', Object.keys(this.textures.list));\n            this.scene.start('MainMenuScene');\n        });\n\n        // Add load error handler\n        this.load.on('loaderror', (file) => {\n            console.error('Error loading asset:', file.key, file.src);\n        });\n    }\n\n    create() {\n        console.log('BootScene create called');\n        // Verify textures are loaded\n        console.log('Heart texture exists:', this.textures.exists('heart'));\n        console.log('Heart empty texture exists:', this.textures.exists('heart-empty'));\n    }\n}\n\n// Main Menu Scene\nclass MainMenuScene extends Phaser.Scene {\n    constructor() {\n        super({ key: 'MainMenuScene' });\n    }\n\n    create() {\n        const { width, height } = this.scale;\n        \n        // Add background image\n        const bg = this.add.image(width/2, height/2, 'startscreen');\n        \n        // Scale the background to cover the screen while maintaining aspect ratio\n        const scaleX = width / bg.width;\n        const scaleY = height / bg.height;\n        const scale = Math.max(scaleX, scaleY);\n        bg.setScale(scale).setAlpha(0.8); // Slightly dim the background\n\n        // Create array to store all text elements\n        const allTextElements = [];\n\n        // Add multiple glow layers for stronger effect\n        const glowColors = [\n            { color: '#4df3ff', alpha: 0.4, thickness: 32 },  // Outermost glow\n            { color: '#4df3ff', alpha: 0.6, thickness: 24 },  // Outer glow\n            { color: '#4df3ff', alpha: 0.8, thickness: 16 },  // Inner glow\n            { color: '#ffffff', alpha: 0.9, thickness: 12 }   // White core\n        ];\n\n        // Add glow layers from outside in\n        glowColors.forEach(({ color, alpha, thickness }) => {\n            const glowText = this.add.text(width / 2, height * 0.2, 'Правописни балони', {\n                fontSize: Math.min(width * 0.08, 84) + 'px',\n                fontFamily: 'Arial Black',\n                fontWeight: 'bold',\n                fill: 'transparent',\n                stroke: color,\n                strokeThickness: thickness\n            }).setOrigin(0.5).setAlpha(alpha);\n            \n            allTextElements.push(glowText);\n        });\n\n        // Add solid text with neon effect\n        const titleText = this.add.text(width / 2, height * 0.2, 'Правописни балони', {\n            fontSize: Math.min(width * 0.08, 84) + 'px',\n            fontFamily: 'Arial Black',\n            fontWeight: 'bold',\n            fill: '#f0f0f0',  // Slightly darker shade of white\n            stroke: '#4df3ff',\n            strokeThickness: 4\n        }).setOrigin(0.5);\n\n        // Add shadow to the title text\n        titleText.setShadow(2, 2, '#000000', 2, true, true);\n        \n        allTextElements.push(titleText);\n\n        // Add pulsing animation to the glow\n        this.tweens.add({\n            targets: allTextElements.slice(0, -1),\n            alpha: '-=0.2',  // Match the button's pulse intensity\n            yoyo: true,\n            duration: 2000,\n            repeat: -1,\n            ease: 'Sine.easeInOut'\n        });\n\n        // Create a container for the button\n        const buttonContainer = this.add.container(width / 2, height * 0.6);\n\n        // Add multiple glow layers for button\n        const buttonGlowColors = [\n            { color: '#4df3ff', alpha: 0.4, thickness: 32 },  // Outermost glow (increased thickness)\n            { color: '#4df3ff', alpha: 0.6, thickness: 24 },  // Outer glow\n            { color: '#4df3ff', alpha: 0.8, thickness: 16 },  // Inner glow\n            { color: '#ffffff', alpha: 0.9, thickness: 12 }   // White core\n        ];\n\n        // Add glow layers from outside in\n        buttonGlowColors.forEach(({ color, alpha, thickness }) => {\n            const buttonGlow = this.add.text(0, 0, 'СТАРТ', {\n                fontSize: Math.min(width * 0.06, 72) + 'px',\n                fontFamily: 'Arial Black',\n                fontWeight: 'bold',\n                fill: 'transparent',\n                stroke: color,\n                strokeThickness: thickness,\n                padding: { x: 8, y: 8 }\n            }).setOrigin(0.5).setAlpha(alpha);\n            \n            buttonContainer.add(buttonGlow);\n        });\n\n        // Add solid text for button with stroke\n        const buttonText = this.add.text(0, 0, 'СТАРТ', {\n            fontSize: Math.min(width * 0.06, 72) + 'px',\n            fontFamily: 'Arial Black',\n            fontWeight: 'bold',\n            fill: '#f0f0f0',  // Slightly darker shade of white\n            stroke: '#4df3ff',\n            strokeThickness: 4,\n            padding: { x: 8, y: 8 }\n        }).setOrigin(0.5);\n\n        // Add shadow to the button text\n        buttonText.setShadow(2, 2, '#000000', 2, true, true);\n        \n        buttonContainer.add(buttonText);\n        buttonText.setInteractive();\n\n        // Add stronger pulsing animation to the button glow\n        this.tweens.add({\n            targets: buttonContainer.list.slice(0, -1),\n            alpha: '-=0.2',  // Increased alpha change for more noticeable pulse\n            yoyo: true,\n            duration: 2000,\n            repeat: -1,\n            ease: 'Sine.easeInOut'\n        });\n\n        // Enhanced button hover effects\n        buttonText.on('pointerover', () => {\n            // Increase glow intensity on hover\n            buttonContainer.list.forEach((glow, index) => {\n                if (index < buttonContainer.list.length - 1) {\n                    const originalAlpha = buttonGlowColors[index].alpha;\n                    glow.setAlpha(originalAlpha + 0.3);  // Increased glow intensity on hover\n                }\n            });\n            this.tweens.add({\n                targets: buttonContainer,\n                scaleX: 1.1,\n                scaleY: 1.1,\n                duration: 100\n            });\n        });\n\n        buttonText.on('pointerout', () => {\n            // Reset glow intensity\n            buttonContainer.list.forEach((glow, index) => {\n                if (index < buttonContainer.list.length - 1) {\n                    const originalAlpha = buttonGlowColors[index].alpha;\n                    glow.setAlpha(originalAlpha);\n                }\n            });\n            this.tweens.add({\n                targets: buttonContainer,\n                scaleX: 1,\n                scaleY: 1,\n                duration: 100\n            });\n        });\n\n        // Start game on click\n        buttonText.on('pointerdown', () => {\n            this.scene.start('GameScene');\n        });\n\n        // Add green particle effects on the sides\n        this.addGreenParticles();\n\n        // Add entrance animations\n        this.tweens.add({\n            targets: allTextElements,\n            y: height * 0.2,\n            duration: 1500,\n            ease: 'Bounce'\n        });\n\n        this.tweens.add({\n            targets: buttonContainer,\n            y: height * 0.6,\n            duration: 1000,\n            ease: 'Bounce',\n            delay: 200\n        });\n    }\n\n    addGreenParticles() {\n        // Add particles on both sides\n        const particles = this.add.particles(0, 0, 'balloon', {\n            x: { min: 0, max: this.scale.width },\n            y: { min: 0, max: this.scale.height },\n            quantity: 1,\n            frequency: 500,\n            scale: { start: 0.1, end: 0 },\n            alpha: { start: 0.5, end: 0 },\n            tint: 0x00ff00,\n            lifespan: 2000,\n            gravityY: -50,\n            blendMode: 'ADD'\n        });\n    }\n}\n\n// Main Game Scene\nclass GameScene extends Phaser.Scene {\n    constructor() {\n        super({ key: 'GameScene' });\n        this.mistakeWords = [];\n        this.wordSets = [];\n        this.currentWordSet = null;\n        console.log('GameScene constructor called');\n    }\n\n    create() {\n        console.log('GameScene create called');\n        // Initialize game state\n        this.round = 1;\n        this.lives = 10;\n        this.balloons = [];\n        this.baseTime = 14;\n        this.minTime = 8;\n        \n        // Get words from loaded JSON and create available words array\n        this.allWords = this.cache.json.get('wordList');\n        this.availableWords = [...this.allWords]; // Create a copy of all words\n        console.log(`Loaded ${this.availableWords.length} words from JSON file`);\n\n        // Add UI\n        this.addUI();\n        console.log('UI added');\n\n        // Start balloon spawning\n        this.startBalloonSpawning();\n        console.log('Balloon spawning started');\n\n        // Add click handler\n        this.input.on('pointerdown', this.handleClick, this);\n        console.log('Click handler added');\n    }\n\n    addUI() {\n        const { width, height } = this.scale;\n        \n        const uiStartX = 10; // Common starting x position for UI elements\n        \n        // Round counter - positioned in the left corner\n        this.roundText = this.add.text(uiStartX, 10, 'Рунд: 1', {\n            fontSize: Math.min(width, height) * 0.04 + 'px',\n            fill: '#000',\n            fontFamily: 'Arial Black',\n            fontWeight: 'bold'\n        });\n\n        // Lives display - positioned directly below round counter\n        const heartsStartY = this.roundText.y + this.roundText.height + 30;\n        this.livesContainer = this.add.container(uiStartX + 25, heartsStartY);\n        \n        // Create health icons vertically with spacing relative to screen height\n        this.healthIcons = [];\n        const iconSpacing = height * 0.06;\n        const heartWidth = 32; // Base width of the heart image\n        const heartScale = Math.min(width, height) * 0.0005;\n        const scaledHeartWidth = heartWidth * heartScale;\n\n        for (let i = 0; i < 10; i++) {\n            const healthIcon = this.add.image(0, i * iconSpacing, 'heart');\n            healthIcon.setScale(heartScale);\n            this.healthIcons.push(healthIcon);\n            this.livesContainer.add(healthIcon);\n        }\n\n        // Store the hearts area for balloon spawn calculations\n        this.heartsArea = {\n            left: uiStartX,\n            right: uiStartX + scaledHeartWidth,\n            top: heartsStartY,\n            bottom: heartsStartY + (iconSpacing * 10)\n        };\n    }\n\n    startBalloonSpawning() {\n        // Initial spawn\n        this.spawnBalloons();\n        this.createSpawnTimer();\n    }\n\n    createSpawnTimer() {\n        // Clear existing timer if it exists\n        if (this.spawnTimer) {\n            this.spawnTimer.remove();\n        }\n\n        // Create new timer as backup in case something goes wrong\n        this.spawnTimer = this.time.addEvent({\n            delay: 10000,\n            callback: () => {\n                if (this.balloons.length === 0) {\n                    this.spawnBalloons();\n                }\n            },\n            callbackScope: this,\n            loop: true\n        });\n    }\n\n    spawnBalloons() {\n        console.log('Spawning balloons...');\n        if (this.lives <= 0) return;\n\n        // Check if we've used all word sets\n        if (this.availableWords.length === 0) {\n            this.scene.start('WinScene', { \n                rounds: this.round,\n                wordSets: this.wordSets\n            });\n            return;\n        }\n\n        // Clear any existing balloons first\n        this.clearBalloons();\n\n        const { width, height } = this.scale;\n\n        // Get random word set from available words and remove it\n        const randomIndex = Phaser.Math.Between(0, this.availableWords.length - 1);\n        const wordSet = this.availableWords[randomIndex];\n        this.availableWords.splice(randomIndex, 1);\n        \n        // Store the current word set\n        this.currentWordSet = wordSet;\n\n        const correctWords = wordSet.words.filter(word => word !== wordSet.incorrect);\n        const incorrectWord = wordSet.incorrect;\n\n        // Randomly choose which balloon will have the incorrect word\n        const incorrectIndex = Phaser.Math.Between(0, 3);\n\n        // Shuffle the correct words to ensure random selection without duplicates\n        const shuffledCorrectWords = Phaser.Utils.Array.Shuffle([...correctWords]);\n        \n        // Calculate the longest word length in all words\n        const maxWordLength = Math.max(\n            ...correctWords.map(word => word.length),\n            incorrectWord.length\n        );\n        \n        // Calculate current time to reach top based on round\n        const timeReduction = Math.floor(this.round / 2) * 0.25;\n        const currentTime = Math.max(this.minTime, this.baseTime - timeReduction);\n        \n        console.log(`Round ${this.round}, Time to top: ${currentTime} seconds`);\n\n        // Calculate balloon width and total width\n        const balloonBaseWidth = Math.min(width, height) * 0.084; // Increased from 0.08 (5% increase)\n        const balloonWidth = balloonBaseWidth * (1 + (maxWordLength > 5 ? (maxWordLength - 5) * 0.084 : 0)); // Increased from 0.08\n        \n        // Calculate base spacing and adjust it based on word length\n        const baseSpacing = width * 0.13; // Keep current spacing\n        const wordLengthSpacingAdjustment = 1 + (maxWordLength > 5 ? (maxWordLength - 5) * 0.0525 : 0); // Increased from 0.05\n        const spacing = baseSpacing * wordLengthSpacingAdjustment;\n\n        // Calculate total width needed\n        const totalSpacing = spacing * 3;\n        const totalBalloonsWidth = balloonWidth * 4;\n        const totalWidth = totalBalloonsWidth + totalSpacing;\n\n        // Position balloons more to the right\n        const minStartX = width * 0.35;\n        const availableWidth = width * 0.6;\n        \n        // Center the balloons in the available space\n        const startX = minStartX + (availableWidth - totalWidth) / 2 + (balloonWidth / 2);\n\n        const startY = height + 50;\n        const endY = -100;\n\n        // Create a set ID for this group of balloons\n        const setID = Date.now();\n\n        for (let i = 0; i < 4; i++) {\n            // Add some randomness to positions\n            const randomXOffset = Phaser.Math.Between(-width * 0.01, width * 0.01);\n            const randomYOffset = Phaser.Math.Between(-height * 0.02, height * 0.02);\n            const x = startX + (i * spacing) + randomXOffset;\n            const y = startY + randomYOffset;\n            \n            const isIncorrect = i === incorrectIndex;\n            // Use incorrect word for incorrect balloon, or take next word from shuffled array\n            const word = isIncorrect ? incorrectWord : shuffledCorrectWords[i >= incorrectIndex ? i - 1 : i];\n\n            // Calculate scale based on longest word length - reduced scaling\n            const baseScale = Math.min(width, height) * 0.00152; // Increased from 0.00145\n            const wordLengthScale = 1 + (maxWordLength > 5 ? (maxWordLength - 5) * 0.0525 : 0); // Increased from 0.05\n            const balloonScale = baseScale * wordLengthScale;\n\n            // Create balloon sprite with size relative to screen and longest word length\n            const balloon = this.add.sprite(x, y, 'balloon');\n            balloon.setScale(balloonScale);\n            balloon.setData('word', word);\n            balloon.setData('isIncorrect', isIncorrect);\n            balloon.setData('setID', setID);\n            balloon.setInteractive();\n\n            // Calculate balloon's dimensions at current scale\n            const actualBalloonWidth = balloon.width * balloonScale;\n            const actualBalloonHeight = balloon.height * balloonScale;\n\n            // Calculate text size based on longest word length - adjusted for better readability\n            const baseFontSize = Math.min(width, height) * 0.026;\n            const fontScale = 1 + (maxWordLength > 5 ? (maxWordLength - 5) * 0.0315 : 0);\n            const fontSize = Math.floor(baseFontSize * fontScale);\n\n            // Add word text with improved styling\n            const text = this.add.text(x, y, word, {\n                fontSize: fontSize + 'px',\n                fontFamily: 'Arial, sans-serif',\n                fontWeight: 'bold',\n                fill: '#000000',\n                backgroundColor: 'rgba(255, 255, 255, 0.9)',\n                padding: { \n                    x: 0, // Remove horizontal padding to let fixedWidth handle it\n                    y: fontSize * 0.4 // Increased vertical padding\n                },\n                fixedWidth: actualBalloonWidth, // Full balloon width\n                align: 'center'\n            }).setOrigin(0.5);\n\n            // Position text at balloon's vertical center\n            text.y = y - (actualBalloonHeight * 0.05); // Moved closer to the middle\n\n            // Add a slight shadow effect for better visibility\n            text.setShadow(1, 1, 'rgba(0,0,0,0.2)', 2);\n\n            // Store references\n            balloon.setData('text', text);\n            this.balloons.push(balloon);\n\n            // Create tween for synchronized movement\n            const targets = [balloon, text];\n            const tween = this.tweens.add({\n                targets: targets,\n                y: endY,\n                duration: currentTime * 1000,\n                ease: 'Linear',\n                onComplete: () => {\n                    // Remove balloon and text\n                    text.destroy();\n                    balloon.destroy();\n                    this.balloons = this.balloons.filter(b => b !== balloon);\n\n                    // Check if this was the last balloon in the set\n                    const remainingBalloonsInSet = this.balloons.filter(b => \n                        b.getData('setID') === setID\n                    );\n\n                    if (remainingBalloonsInSet.length === 0 && this.currentWordSet) {\n                        this.wordSets.push({\n                            clicked: null,\n                            correct: this.currentWordSet.incorrect,\n                            allWords: this.currentWordSet.words\n                        });\n                        // Increment round when balloons fly out\n                        this.round += 1;\n                        this.roundText.setText('Рунд: ' + this.round);\n                        \n                        this.loseLife();\n                        // Spawn new balloons immediately\n                        this.time.delayedCall(100, () => {\n                            this.spawnBalloons();\n                        });\n                    }\n                }\n            });\n\n            // Store tween reference\n            balloon.setData('tween', tween);\n        }\n    }\n\n    clearBalloons() {\n        // Clean up existing balloons\n        this.balloons.forEach(balloon => {\n            const tween = balloon.getData('tween');\n            if (tween) tween.stop();\n            balloon.getData('text').destroy();\n            balloon.destroy();\n        });\n        this.balloons = [];\n    }\n\n    update() {\n        // No need for update check since onComplete handles everything\n    }\n\n    handleClick(pointer) {\n        const clickedBalloon = this.balloons.find(balloon => {\n            const bounds = new Phaser.Geom.Rectangle(\n                balloon.x - (balloon.width * balloon.scaleX) / 2,\n                balloon.y - (balloon.height * balloon.scaleY) / 2,\n                balloon.width * balloon.scaleX + 60,\n                balloon.height * balloon.scaleY + 60\n            );\n            return bounds.contains(pointer.x, pointer.y);\n        });\n\n        if (clickedBalloon && this.currentWordSet) {\n            const isIncorrect = clickedBalloon.getData('isIncorrect');\n            const currentSet = {\n                clicked: clickedBalloon.getData('word'),\n                correct: isIncorrect ? clickedBalloon.getData('word') : this.currentWordSet.incorrect,\n                allWords: this.currentWordSet.words\n            };\n            this.wordSets.push(currentSet);\n            \n            // Increment round counter for any balloon click\n            this.round += 1;\n            this.roundText.setText('Рунд: ' + this.round);\n            \n            if (isIncorrect) {\n                // Visual feedback for correct answer\n                this.createParticles(clickedBalloon.x, clickedBalloon.y, '#00ff00');\n                this.sound.play('success');\n            } else {\n                this.loseLife();\n                this.createParticles(clickedBalloon.x, clickedBalloon.y, '#ff0000');\n                this.sound.play('pop');\n                // Add the correct word to mistakes list\n                this.mistakeWords.push(clickedBalloon.getData('word'));\n            }\n\n            this.createArrowAnimation(pointer, clickedBalloon);\n\n            // Clear all balloons and set up next spawn\n            this.clearBalloons();\n            \n            // Clear the existing spawn timer\n            if (this.spawnTimer) {\n                this.spawnTimer.remove();\n            }\n\n            // Quick spawn after shooting (1 second)\n            this.time.delayedCall(1000, () => {\n                if (this.lives > 0) {  // Only spawn if still alive\n                    this.spawnBalloons();\n                    this.createSpawnTimer();\n                }\n            });\n        }\n    }\n\n    createParticles(x, y, color) {\n        const particles = this.add.particles(0, 0, 'balloon', {\n            x: x,\n            y: y,\n            speed: { min: 100, max: 200 },\n            angle: { min: 0, max: 360 },\n            scale: { start: 0.2, end: 0 },\n            alpha: { start: 0.6, end: 0 },\n            lifespan: 500,\n            quantity: 10,\n            tint: color\n        });\n\n        this.time.delayedCall(500, () => {\n            particles.destroy();\n        });\n    }\n\n    createArrowAnimation(from, to) {\n        // Start arrow from bottom of screen, aligned with the balloon's x position\n        const startX = to.x;\n        const startY = this.scale.height; // Bottom of the screen\n        const arrow = this.add.sprite(startX, startY, 'arrow');\n        \n        // Calculate angle between bottom position and balloon\n        const angle = Phaser.Math.Angle.Between(startX, startY, to.x, to.y);\n        arrow.setRotation(angle);\n\n        this.tweens.add({\n            targets: arrow,\n            x: to.x,\n            y: to.y,\n            duration: 200,\n            onComplete: () => arrow.destroy()\n        });\n    }\n\n    loseLife() {\n        this.lives -= 1;\n        \n        if (this.healthIcons[this.lives]) {\n            const icon = this.healthIcons[this.lives];\n            icon.setTexture('heart-empty');\n            icon.setAlpha(0.3);\n            \n            this.tweens.add({\n                targets: icon,\n                x: icon.x + 5,\n                duration: 50,\n                yoyo: true,\n                repeat: 2\n            });\n        }\n\n        this.cameras.main.shake(100, 0.005);\n\n        if (this.lives <= 0) {\n            // Clean up before transitioning\n            this.clearBalloons();\n            if (this.spawnTimer) {\n                this.spawnTimer.remove();\n            }\n            // Stop any ongoing tweens\n            this.tweens.killAll();\n            \n            this.scene.start('GameOverScene', { \n                score: this.round,\n                wordSets: this.wordSets\n            });\n        }\n    }\n}\n\n// Game Over Scene\nclass GameOverScene extends Phaser.Scene {\n    constructor() {\n        super({ key: 'GameOverScene' });\n    }\n\n    init(data) {\n        this.score = data.score;\n        this.wordSets = data.wordSets || [];\n        console.log('GameOverScene initialized with:', {\n            score: this.score,\n            wordSets: this.wordSets\n        });\n    }\n\n    create() {\n        const { width, height } = this.scale;\n        \n        // Add dark overlay\n        this.add.rectangle(0, 0, width, height, 0x000000, 0.7)\n            .setOrigin(0);\n\n        // Game over text\n        const gameOverText = this.add.text(width / 2, height * 0.15, 'Играта приключи', {\n            fontSize: '96px',\n            fontFamily: 'Arial Black',\n            fill: '#ff0000',\n            stroke: '#ffffff',\n            strokeThickness: 4, // Reduced from 8\n            shadow: { blur: 8, color: '#ff0000', fill: true }, // Reduced blur from 15\n            padding: { x: 20, y: 20 }\n        }).setOrigin(0.5);\n\n        // Score text\n        const scoreText = this.add.text(width / 2, height * 0.30, `Минати рундове: ${this.score}`, {\n            fontSize: '32px',\n            fontFamily: 'Arial',\n            fill: '#ffffff',\n            stroke: '#000000',\n            strokeThickness: 4\n        }).setOrigin(0.5);\n\n        // Create scrollable text box\n        const textBoxWidth = width * 0.7;\n        const textBoxHeight = height * 0.5;\n        const textBoxX = width * 0.15;\n        const textBoxY = height * 0.35;\n\n        // White background for text box with border\n        const textBoxBg = this.add.rectangle(textBoxX, textBoxY, textBoxWidth, textBoxHeight, 0xffffff)\n            .setOrigin(0)\n            .setStrokeStyle(2, 0x000000);\n\n        // Create text content directly without container\n        let yPos = textBoxY + 20;\n        let xPos = textBoxX + 40;\n        let currentLineWidth = 0;\n        const availableWidth = textBoxWidth - 80; // 40px padding on each side\n\n        // Filter only the rounds with mistakes (where clicked is not correct)\n        const mistakeRounds = this.wordSets.filter(set => \n            set.clicked !== set.correct\n        );\n\n        console.log('Processing mistake rounds:', mistakeRounds.length);\n        \n        mistakeRounds.forEach((set) => {\n            // Calculate available width for words\n            let xPos = textBoxX + 40;\n            let currentLineWidth = 0;\n\n            // Render words with proper wrapping\n            set.allWords.forEach((word, wordIndex) => {\n                let color = '#000000'; // Default black\n                if (word === set.clicked) color = '#ff0000'; // Red for clicked wrong word\n                if (word === set.correct) color = '#00ff00'; // Green for correct word\n\n                const wordText = this.add.text(xPos, yPos, word, {\n                    fontSize: '22px',\n                    fontFamily: 'Arial',\n                    fill: color,\n                    fontWeight: 'bold'\n                });\n\n                // Check if we need to wrap to next line\n                if (currentLineWidth + wordText.width + 30 > availableWidth && wordIndex > 0) {\n                    yPos += 35; // Move to next line\n                    xPos = textBoxX + 40; // Reset x position\n                    currentLineWidth = 0; // Reset line width\n                    wordText.setPosition(xPos, yPos);\n                }\n\n                currentLineWidth += wordText.width + 30;\n                xPos += wordText.width + 30;\n            });\n            \n            yPos += 45; // Space between sets\n        });\n\n        // If no mistakes were made, show a congratulatory message\n        if (mistakeRounds.length === 0) {\n            this.add.text(textBoxX + textBoxWidth/2, textBoxY + textBoxHeight/2, \n                'Perfect Score!\\nNo mistakes made!', {\n                fontSize: '32px',\n                fontFamily: 'Arial',\n                fill: '#00aa00',\n                align: 'center',\n                fontWeight: 'bold'\n            }).setOrigin(0.5);\n        }\n\n        // Create mask for scrolling\n        const maskGraphics = this.add.graphics()\n            .fillStyle(0xffffff)\n            .fillRect(textBoxX, textBoxY, textBoxWidth - 20, textBoxHeight);\n\n        // Create a container for masking\n        const maskContainer = this.add.container(0, 0);\n        maskContainer.setMask(new Phaser.Display.Masks.GeometryMask(this, maskGraphics));\n\n        // Add all text objects to the mask container\n        this.children.list\n            .filter(child => child instanceof Phaser.GameObjects.Text)\n            .forEach(text => {\n                if (text !== gameOverText && text !== scoreText) {\n                    maskContainer.add(text);\n                }\n            });\n\n        // Scrollbar background\n        const scrollBarBg = this.add.rectangle(\n            textBoxX + textBoxWidth - 20,\n            textBoxY,\n            20,\n            textBoxHeight,\n            0xdddddd\n        ).setOrigin(0);\n\n        // Calculate scrollbar height and position\n        const contentHeight = yPos - textBoxY;\n        const scrollBarHeight = Math.max((textBoxHeight / contentHeight) * textBoxHeight, 50);\n        \n        // Create scrollbar\n        const scrollBar = this.add.rectangle(\n            textBoxX + textBoxWidth - 20,\n            textBoxY,\n            20,\n            scrollBarHeight,\n            0x666666\n        ).setOrigin(0)\n            .setInteractive({ draggable: true, useHandCursor: true });\n\n        // Scrolling logic\n        const maxScroll = Math.max(0, contentHeight - textBoxHeight);\n        const scrollFactor = maxScroll / (textBoxHeight - scrollBarHeight);\n\n        // Update scroll position function\n        const updateScrollPosition = () => {\n            // Ensure scrollbar stays within bounds\n            const maxY = textBoxY + textBoxHeight - scrollBarHeight;\n            scrollBar.y = Phaser.Math.Clamp(scrollBar.y, textBoxY, maxY);\n\n            // Update content position\n            const scrollPos = (scrollBar.y - textBoxY) * scrollFactor;\n            maskContainer.y = -scrollPos;\n        };\n\n        // Drag events\n        scrollBar.on('drag', (pointer, dragX, dragY) => {\n            scrollBar.y = dragY;\n            updateScrollPosition();\n        });\n\n        // Mouse wheel scrolling\n        this.input.on('wheel', (pointer, gameObjects, deltaX, deltaY, deltaZ) => {\n            if (pointer.x >= textBoxX && pointer.x <= textBoxX + textBoxWidth &&\n                pointer.y >= textBoxY && pointer.y <= textBoxY + textBoxHeight) {\n                scrollBar.y += deltaY * 0.5;\n                updateScrollPosition();\n            }\n        });\n\n        // Play Again button\n        const playAgainButton = this.add.container(width / 2, height * 0.92);\n        \n        const buttonBg = this.add.rectangle(0, 0, 200, 60, 0x4444ff, 1)\n            .setOrigin(0.5);\n        \n        const buttonText = this.add.text(0, 0, 'Играй отново', {\n            fontSize: '32px',\n            fontFamily: 'Arial Black',\n            fill: '#ffffff'\n        }).setOrigin(0.5);\n\n        playAgainButton.add([buttonBg, buttonText]);\n        playAgainButton.setSize(250, 60);\n        buttonBg.setSize(250, 60);\n        playAgainButton.setInteractive();\n\n        // Button hover effects\n        playAgainButton.on('pointerover', () => {\n            buttonBg.setFillStyle(0x6666ff);\n            this.tweens.add({\n                targets: playAgainButton,\n                scaleX: 1.1,\n                scaleY: 1.1,\n                duration: 100\n            });\n        });\n\n        playAgainButton.on('pointerout', () => {\n            buttonBg.setFillStyle(0x4444ff);\n            this.tweens.add({\n                targets: playAgainButton,\n                scaleX: 1,\n                scaleY: 1,\n                duration: 100\n            });\n        });\n\n        playAgainButton.on('pointerdown', () => {\n            this.scene.start('GameScene');\n        });\n    }\n}\n\n// Add new Win Scene\nclass WinScene extends Phaser.Scene {\n    constructor() {\n        super({ key: 'WinScene' });\n    }\n\n    init(data) {\n        this.rounds = data.rounds;\n        this.wordSets = data.wordSets || [];\n    }\n\n    create() {\n        const { width, height } = this.scale;\n        \n        // Add dark overlay with more transparency\n        this.add.rectangle(0, 0, width, height, 0x000000, 0.5)\n            .setOrigin(0);\n\n        // Play win sound\n        this.sound.play('win');\n\n        // Create fireworks emitter first so it's behind everything\n        this.createFireworks();\n\n        // Add victory text with reduced effects\n        const winText = this.add.text(width / 2, height * 0.15, 'Поздравления!\\nТи спечели!', {\n            fontSize: '96px',   \n            fontFamily: 'Arial Black',\n            fill: '#4CAF50',\n            stroke: '#ffffff',\n            strokeThickness: 4,\n            align: 'center',\n            padding: { x: 20, y: 20 }\n        }).setOrigin(0.5);\n\n        // Create semi-transparent text box\n        const textBoxWidth = width * 0.7;\n        const textBoxHeight = height * 0.35; // Reduced height\n        const textBoxX = width * 0.15;\n        const textBoxY = height * 0.45; // Moved down slightly\n\n        // White background for text box with border and transparency\n        const textBoxBg = this.add.rectangle(textBoxX, textBoxY, textBoxWidth, textBoxHeight, 0xffffff)\n            .setOrigin(0)\n            .setStrokeStyle(2, 0x000000)\n            .setAlpha(0.9); // Make it slightly transparent\n\n        // Create text content\n        let yPos = textBoxY + 20;\n        let xPos = textBoxX + 40;\n        const availableWidth = textBoxWidth - 80;\n\n        // Filter only the rounds with mistakes\n        const mistakeRounds = this.wordSets.filter(set => \n            set.clicked !== set.correct\n        );\n\n        // Add \"Words you missed:\" text above the box\n        const missedWordsText = this.add.text(textBoxX, textBoxY - 40, 'Объркани думи:', {\n            fontSize: '28px',\n            fontFamily: 'Arial',\n            fill: '#ffffff'\n        });\n\n        if (mistakeRounds.length > 0) {\n            mistakeRounds.forEach((set) => {\n                let xPos = textBoxX + 40;\n                let currentLineWidth = 0;\n\n                set.allWords.forEach((word, wordIndex) => {\n                    let color = '#000000';\n                    if (word === set.clicked) color = '#ff0000';\n                    if (word === set.correct) color = '#4CAF50';\n\n                    const wordText = this.add.text(xPos, yPos, word, {\n                        fontSize: '22px',\n                        fontFamily: 'Arial',\n                        fill: color,\n                        fontWeight: 'bold'\n                    });\n\n                    if (currentLineWidth + wordText.width + 30 > availableWidth && wordIndex > 0) {\n                        yPos += 35;\n                        xPos = textBoxX + 40;\n                        currentLineWidth = 0;\n                        wordText.setPosition(xPos, yPos);\n                    }\n\n                    currentLineWidth += wordText.width + 30;\n                    xPos += wordText.width + 30;\n                });\n                \n                yPos += 45;\n            });\n        } else {\n            this.add.text(textBoxX + textBoxWidth/2, textBoxY + textBoxHeight/2, \n                'Перфектен резултат!\\nНяма грешки!', {\n                fontSize: '32px',\n                fontFamily: 'Arial',\n                fill: '#4CAF50',\n                align: 'center',\n                fontWeight: 'bold'\n            }).setOrigin(0.5);\n        }\n\n        // Create mask for scrolling\n        const maskGraphics = this.add.graphics()\n            .fillStyle(0xffffff)\n            .fillRect(textBoxX, textBoxY, textBoxWidth - 20, textBoxHeight);\n\n        // Create a container for masking\n        const maskContainer = this.add.container(0, 0);\n        maskContainer.setMask(new Phaser.Display.Masks.GeometryMask(this, maskGraphics));\n\n        // Add all text objects to the mask container\n        this.children.list\n            .filter(child => child instanceof Phaser.GameObjects.Text)\n            .forEach(text => {\n                if (text !== winText && text !== missedWordsText) {\n                    maskContainer.add(text);\n                }\n            });\n\n        // Scrollbar background\n        const scrollBarBg = this.add.rectangle(\n            textBoxX + textBoxWidth - 20,\n            textBoxY,\n            20,\n            textBoxHeight,\n            0xdddddd\n        ).setOrigin(0);\n\n        // Calculate scrollbar height and position\n        const contentHeight = yPos - textBoxY;\n        const scrollBarHeight = Math.max((textBoxHeight / contentHeight) * textBoxHeight, 50);\n        \n        // Create scrollbar\n        const scrollBar = this.add.rectangle(\n            textBoxX + textBoxWidth - 20,\n            textBoxY,\n            20,\n            scrollBarHeight,\n            0x666666\n        ).setOrigin(0)\n            .setInteractive({ draggable: true, useHandCursor: true });\n\n        // Scrolling logic\n        const maxScroll = Math.max(0, contentHeight - textBoxHeight);\n        const scrollFactor = maxScroll / (textBoxHeight - scrollBarHeight);\n\n        // Update scroll position function\n        const updateScrollPosition = () => {\n            // Ensure scrollbar stays within bounds\n            const maxY = textBoxY + textBoxHeight - scrollBarHeight;\n            scrollBar.y = Phaser.Math.Clamp(scrollBar.y, textBoxY, maxY);\n\n            // Update content position\n            const scrollPos = (scrollBar.y - textBoxY) * scrollFactor;\n            maskContainer.y = -scrollPos;\n        };\n\n        // Drag events\n        scrollBar.on('drag', (pointer, dragX, dragY) => {\n            scrollBar.y = dragY;\n            updateScrollPosition();\n        });\n\n        // Mouse wheel scrolling\n        this.input.on('wheel', (pointer, gameObjects, deltaX, deltaY, deltaZ) => {\n            if (pointer.x >= textBoxX && pointer.x <= textBoxX + textBoxWidth &&\n                pointer.y >= textBoxY && pointer.y <= textBoxY + textBoxHeight) {\n                scrollBar.y += deltaY * 0.5;\n                updateScrollPosition();\n            }\n        });\n\n        // Add styled play again button\n        const playAgainButton = this.add.container(width / 2, height * 0.85);\n        \n        const buttonBg = this.add.rectangle(0, 0, 200, 60, 0x4CAF50, 1)\n            .setOrigin(0.5);\n        \n        const buttonText = this.add.text(0, 0, 'Играй отново', {\n            fontSize: '32px',\n            fontFamily: 'Arial Black',\n            fill: '#ffffff'\n        }).setOrigin(0.5);\n\n        playAgainButton.add([buttonBg, buttonText]);\n        playAgainButton.setSize(250, 60);\n        buttonBg.setSize(250, 60);\n        playAgainButton.setInteractive();\n\n        // Button hover effects\n        playAgainButton.on('pointerover', () => {\n            buttonBg.setFillStyle(0x66BB6A);\n            this.tweens.add({\n                targets: playAgainButton,\n                scaleX: 1.1,\n                scaleY: 1.1,\n                duration: 100\n            });\n        });\n\n        playAgainButton.on('pointerout', () => {\n            buttonBg.setFillStyle(0x4CAF50);\n            this.tweens.add({\n                targets: playAgainButton,\n                scaleX: 1,\n                scaleY: 1,\n                duration: 100\n            });\n        });\n\n        playAgainButton.on('pointerdown', () => {\n            this.scene.start('GameScene');\n        });\n    }\n\n    createFireworks() {\n        const { width, height } = this.scale;\n\n        // Simplified colors - fewer options to reduce overhead\n        const colors = [\n            0xff0000, 0x00ff00, 0x0000ff,     // Primary colors\n            0xffff00, 0xff00ff, 0x00ffff      // Secondary colors\n        ];\n\n        // Launch firework function\n        const launchFirework = () => {\n            // Random position at bottom of screen\n            const startX = Phaser.Math.Between(width * 0.2, width * 0.8);\n            const startY = height;\n\n            // Random position for explosion\n            const explodeX = Phaser.Math.Between(width * 0.2, width * 0.8);\n            const explodeY = Phaser.Math.Between(height * 0.2, height * 0.6);\n\n            // Random colors\n            const color = Phaser.Utils.Array.GetRandom(colors);\n\n            // Create simpler rocket\n            const rocket = this.add.particles(startX, startY, 'balloon', {\n                speed: { min: 100, max: 200 },\n                scale: { start: 0.3, end: 0.1 },\n                lifespan: 300,\n                quantity: 1,\n                tint: color,\n                blendMode: 'ADD',\n                emitting: true\n            });\n\n            // Move rocket to explosion point\n            this.tweens.add({\n                targets: rocket,\n                x: explodeX,\n                y: explodeY,\n                duration: 1000,\n                ease: 'Quad.easeOut',\n                onComplete: () => {\n                    rocket.destroy();\n                    \n                    // Create explosion\n                    const explosion = this.add.particles(explodeX, explodeY, 'balloon', {\n                        speed: { min: 200, max: 300 },\n                        angle: { min: 0, max: 360 },\n                        scale: { start: 0.4, end: 0 },\n                        alpha: { start: 1, end: 0 },\n                        lifespan: 800,\n                        quantity: 30,\n                        tint: color,\n                        blendMode: 'ADD',\n                        emitting: false\n                    });\n\n                    // Emit once and cleanup\n                    explosion.start();\n                    this.time.delayedCall(800, () => explosion.destroy());\n                }\n            });\n        };\n\n        // Launch fireworks timer\n        const fireworkTimer = this.time.addEvent({\n            delay: 600,\n            callback: launchFirework,\n            callbackScope: this,\n            loop: true\n        });\n\n        // Initial fireworks\n        for (let i = 0; i < 3; i++) {\n            this.time.delayedCall(i * 400, launchFirework, [], this);\n        }\n\n        // Stop fireworks after 6 seconds\n        this.time.delayedCall(6000, () => {\n            fireworkTimer.destroy();\n        });\n    }\n}\n\n// Game configuration\nconst config = {\n    type: Phaser.AUTO,\n    scale: {\n        mode: Phaser.Scale.FIT,\n        parent: 'game-container',\n        autoCenter: Phaser.Scale.CENTER_BOTH,\n        width: 1280, // Fixed base width\n        height: 720, // Fixed base height\n        min: {\n            width: 800,\n            height: 600\n        },\n        max: {\n            width: 1280,\n            height: 720\n        }\n    },\n    backgroundColor: '#ffffff',\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: { y: 0 },\n            debug: false\n        }\n    },\n    scene: [BootScene, MainMenuScene, GameScene, GameOverScene, WinScene]\n};\n\n// Add resize handler with proper centering\nwindow.addEventListener('resize', () => {\n    if (game) {\n        const width = Math.min(window.innerWidth, 1280);\n        const height = Math.min(window.innerHeight, 720);\n        game.scale.resize(width, height);\n        \n        // Center the game container\n        const gameContainer = document.getElementById('game-container');\n        if (gameContainer) {\n            gameContainer.style.position = 'absolute';\n            gameContainer.style.left = '50%';\n            gameContainer.style.top = '50%';\n            gameContainer.style.transform = 'translate(-50%, -50%)';\n        }\n    }\n});\n\n// Start the game\nconsole.log('Initializing game...');\nlet game;\ntry {\n    game = new Phaser.Game(config);\n    console.log('Game initialized successfully!');\n} catch (error) {\n    console.error('Error initializing game:', error);\n} "],"names":["BootScene","value","file","MainMenuScene","width","height","bg","scaleX","scaleY","scale","allTextElements","color","alpha","thickness","glowText","titleText","buttonContainer","buttonGlowColors","buttonGlow","buttonText","glow","index","originalAlpha","GameScene","uiStartX","heartsStartY","iconSpacing","heartWidth","heartScale","scaledHeartWidth","i","healthIcon","randomIndex","wordSet","correctWords","word","incorrectWord","incorrectIndex","shuffledCorrectWords","maxWordLength","timeReduction","currentTime","balloonWidth","baseSpacing","wordLengthSpacingAdjustment","spacing","totalSpacing","totalWidth","minStartX","availableWidth","startX","startY","endY","setID","randomXOffset","randomYOffset","x","y","isIncorrect","baseScale","wordLengthScale","balloonScale","balloon","actualBalloonWidth","actualBalloonHeight","baseFontSize","fontScale","fontSize","text","targets","tween","b","pointer","clickedBalloon","currentSet","particles","from","to","arrow","angle","icon","GameOverScene","data","gameOverText","scoreText","textBoxWidth","textBoxHeight","textBoxX","textBoxY","yPos","mistakeRounds","set","xPos","currentLineWidth","wordIndex","wordText","maskGraphics","maskContainer","child","contentHeight","scrollBarHeight","scrollBar","scrollFactor","updateScrollPosition","maxY","scrollPos","dragX","dragY","gameObjects","deltaX","deltaY","deltaZ","playAgainButton","buttonBg","WinScene","winText","missedWordsText","colors","launchFirework","explodeX","explodeY","rocket","explosion","fireworkTimer","config","game","gameContainer","error"],"mappings":"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"}