{"version":3,"file":"main-DgWbSddB.js","sources":["../../src/main.js"],"sourcesContent":["// Remove the import since we're loading Phaser via CDN\r\n// import Phaser from 'phaser';\r\n\r\n// Boot Scene - Loads assets\r\nclass BootScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({ key: 'BootScene' });\r\n        console.log('BootScene constructor called');\r\n    }\r\n\r\n    preload() {\r\n        console.log('Starting to load assets...');\r\n        \r\n        // Add load progress handler\r\n        this.load.on('progress', (value) => {\r\n            console.log('Loading progress:', Math.round(value * 100) + '%');\r\n        });\r\n\r\n        // Load game assets\r\n        this.load.image('balloon', 'assets/balloon.png');\r\n        this.load.image('easy', 'assets/easy.png');\r\n        this.load.image('medium', 'assets/medium.png');\r\n        this.load.image('arrow', 'assets/arrow.svg');\r\n        this.load.image('heart', 'assets/heart.png');\r\n        this.load.image('heart-empty', 'assets/brokenheart.png');\r\n        \r\n        // Load different background based on device\r\n        this.load.image('startscreen', 'assets/startscreen2.jpg');\r\n        \r\n        this.load.audio('pop', 'assets/pop.mp3');\r\n        this.load.audio('success', 'assets/success.mp3');\r\n        this.load.audio('win', 'assets/win.mp3');\r\n        // Load words from JSON file\r\n        this.load.json('wordList', 'assets/words.json');\r\n\r\n        // Add load complete handler\r\n        this.load.on('complete', () => {\r\n            console.log('All assets loaded successfully!');\r\n            // Log all available textures\r\n            console.log('Available textures:', Object.keys(this.textures.list));\r\n            this.scene.start('MainMenuScene');\r\n        });\r\n\r\n        // Add load error handler\r\n        this.load.on('loaderror', (file) => {\r\n            console.error('Error loading asset:', file.key, file.src);\r\n        });\r\n    }\r\n\r\n    create() {\r\n        console.log('BootScene create called');\r\n        // Verify textures are loaded\r\n        console.log('Heart texture exists:', this.textures.exists('heart'));\r\n        console.log('Heart empty texture exists:', this.textures.exists('heart-empty'));\r\n    }\r\n}\r\n\r\n// Main Menu Scene\r\nclass MainMenuScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({ key: 'MainMenuScene' });\r\n        this.selectedDifficulty = null;\r\n    }\r\n\r\n    create() {\r\n        const { width, height } = this.scale;\r\n        \r\n        // Add background image\r\n        const bg = this.add.image(width/2, height/2, 'startscreen');\r\n        \r\n        // Scale the background to cover the screen while maintaining aspect ratio\r\n        const scaleX = width / bg.width;\r\n        const scaleY = height / bg.height;\r\n        const scale = Math.max(scaleX, scaleY);\r\n        bg.setScale(scale).setAlpha(0.8); // Slightly dim the background\r\n\r\n        // Create array to store all text elements\r\n        const allTextElements = [];\r\n\r\n        // Add multiple glow layers for stronger effect\r\n        const glowColors = [\r\n            { color: '#4df3ff', alpha: 0.4, thickness: 32 },  // Outermost glow\r\n            { color: '#4df3ff', alpha: 0.6, thickness: 24 },  // Outer glow\r\n            { color: '#4df3ff', alpha: 0.8, thickness: 16 },  // Inner glow\r\n            { color: '#ffffff', alpha: 0.9, thickness: 12 }   // White core\r\n        ];\r\n\r\n        // Add glow layers from outside in\r\n        glowColors.forEach(({ color, alpha, thickness }) => {\r\n            const glowText = this.add.text(width / 2, height * 0.2, 'Граматичко', {\r\n                fontSize: Math.min(width * 0.08, 84) + 'px',\r\n                fontFamily: 'Arial Black',\r\n                fontWeight: 'bold',\r\n                fill: 'transparent',\r\n                stroke: color,\r\n                strokeThickness: thickness\r\n            }).setOrigin(0.5).setAlpha(alpha);\r\n            \r\n            allTextElements.push(glowText);\r\n        });\r\n\r\n        // Add solid text with neon effect\r\n        const titleText = this.add.text(width / 2, height * 0.2, 'Граматичко', {\r\n            fontSize: Math.min(width * 0.08, 84) + 'px',\r\n            fontFamily: 'Arial Black',\r\n            fontWeight: 'bold',\r\n            fill: '#fdfdfd',  // Slightly darker shade of white\r\n            stroke: '#4df3ff',\r\n            strokeThickness: 4\r\n        }).setOrigin(0.5);\r\n\r\n        // Add shadow to the title text\r\n        titleText.setShadow(2, 2, '#000000', 2, true, true);\r\n        \r\n        allTextElements.push(titleText);\r\n\r\n        // Add creator credit with glow effect\r\n        const creatorGlowColors = [\r\n            { color: '#4df3ff', alpha: 0.4, thickness: 16 },  // Outermost glow\r\n            { color: '#4df3ff', alpha: 0.5, thickness: 12 },  // Outer glow\r\n            { color: '#4df3ff', alpha: 0.6, thickness: 8 },   // Inner glow\r\n            { color: '#ffffff', alpha: 0.8, thickness: 4 }    // White core\r\n        ];\r\n\r\n        // Add glow layers for creator text\r\n        creatorGlowColors.forEach(({ color, alpha, thickness }) => {\r\n            const glowText = this.add.text(width / 2, height * 0.2 + titleText.height + 5, 'от Георги Стаматов', {\r\n                fontSize: Math.min(width * 0.03, 32) + 'px',\r\n                fontFamily: 'Arial Black',\r\n                fontWeight: 'bold',\r\n                fill: 'transparent',\r\n                stroke: color,\r\n                strokeThickness: thickness\r\n            }).setOrigin(0.5).setAlpha(alpha);\r\n            \r\n            allTextElements.push(glowText);\r\n        });\r\n\r\n        // Add solid creator text\r\n        const creatorText = this.add.text(width / 2, height * 0.2 + titleText.height + 5, 'от Георги Стаматов', {\r\n            fontSize: Math.min(width * 0.03, 32) + 'px',\r\n            fontFamily: 'Arial Black',\r\n            fontWeight: 'bold',\r\n            fill: '#fdfdfd',\r\n            stroke: '#4df3ff',\r\n            strokeThickness: 1\r\n        }).setOrigin(0.5);\r\n\r\n        // Add shadow to creator text\r\n        creatorText.setShadow(1, 1, '#000000', 2, true, true);\r\n        \r\n        allTextElements.push(creatorText);\r\n\r\n        // Add help button with permanent cyan glow effect\r\n        const helpButtonSize = Math.min(width * 0.05, 50);\r\n        const helpCircle = this.add.circle(width * 0.92, height * 0.15, helpButtonSize, 0x4df3ff, 0.2)\r\n            .setStrokeStyle(2, 0x4df3ff)\r\n            .setInteractive();\r\n\r\n        // Add main help button text\r\n        const helpButton = this.add.text(width * 0.92, height * 0.15, '?', {\r\n            fontSize: helpButtonSize * 1.2 + 'px',\r\n            fontFamily: 'Arial Black',\r\n            fontWeight: 'bold',\r\n            fill: '#ffffff'\r\n        }).setOrigin(0.5);\r\n\r\n        // Add subtle hover effect\r\n        helpCircle.on('pointerover', () => {\r\n            helpCircle.setFillStyle(0x4df3ff, 0.3);\r\n        });\r\n\r\n        helpCircle.on('pointerout', () => {\r\n            helpCircle.setFillStyle(0x4df3ff, 0.2);\r\n        });\r\n\r\n        // Create black overlay for the entire screen\r\n        const overlay = this.add.rectangle(0, 0, width, height, 0x000000, 0.7)\r\n            .setOrigin(0)\r\n            .setAlpha(0)\r\n            .setDepth(1)\r\n            .setInteractive();\r\n\r\n        // Create modal background with enhanced gradient effect\r\n        const modalWidth = isMobile ? width * 0.65 : width * 0.5;\r\n        const modalHeight = isMobile ? height * 0.65 : height * 0.35; // Reduced height for mobile\r\n        const modalBg = this.add.rectangle(0, 0, modalWidth, modalHeight, 0x000000, 0.95)\r\n            .setOrigin(0.5)\r\n            .setAlpha(1)\r\n            .setStrokeStyle(2, 0x4df3ff);\r\n\r\n        // Create modal container and position it in the center\r\n        const modalContainer = this.add.container(width/2, isMobile ? height * 0.4 : height * 0.45);\r\n        modalContainer.setAlpha(0);\r\n        modalContainer.setDepth(2);\r\n        modalContainer.add(modalBg);\r\n\r\n        // Add modal text with mobile-optimized styling\r\n        const modalText = this.add.text(0, -modalBg.height * 0.05, 'ИНФОРМАЦИЯ\\n\\nУцелете балона с грешната дума.\\nИграта е от 200 тура,\\nимате възможност за 10 несполучливи опита.', {\r\n            fontSize: isMobile ? Math.min(width * 0.035, 28) + 'px' : Math.min(width * 0.025, 25) + 'px',\r\n            fontFamily: 'Arial Black',\r\n            fill: '#ffffff',\r\n            align: 'center',\r\n            lineSpacing: isMobile ? 8 : 15,\r\n            padding: { x: 10, y: 5 }\r\n        }).setOrigin(0.5);\r\n\r\n        // Add close button with mobile-optimized styling\r\n        const closeButton = this.add.container(0, modalBg.height * 0.5);\r\n        \r\n        const buttonWidth = isMobile ? 140 : 140;\r\n        const buttonHeight = isMobile ? 45 : 45;\r\n        \r\n        const closeButtonBg = this.add.rectangle(0, 0, buttonWidth, buttonHeight, 0x000000, 1)\r\n            .setOrigin(0.5)\r\n            .setStrokeStyle(2, 0x4df3ff);\r\n\r\n        const closeButtonText = this.add.text(0, 0, 'Затвори', {\r\n            fontSize: isMobile ? Math.min(width * 0.035, 24) + 'px' : Math.min(width * 0.022, 24) + 'px',\r\n            fontFamily: 'Arial Black',\r\n            fill: '#ffffff'\r\n        }).setOrigin(0.5);\r\n\r\n        closeButton.add([closeButtonBg, closeButtonText]);\r\n        closeButton.setInteractive(new Phaser.Geom.Rectangle(\r\n            -buttonWidth/2, \r\n            -buttonHeight/2, \r\n            buttonWidth, \r\n            buttonHeight\r\n        ), Phaser.Geom.Rectangle.Contains);\r\n\r\n        // Add hover effects\r\n        closeButton.on('pointerover', () => {\r\n            closeButtonBg.setFillStyle(0x4df3ff, 0.3);\r\n            this.tweens.add({\r\n                targets: closeButton,\r\n                scaleX: 1.1,\r\n                scaleY: 1.1,\r\n                duration: 200,\r\n                ease: 'Back.easeOut'\r\n            });\r\n        });\r\n\r\n        closeButton.on('pointerout', () => {\r\n            closeButtonBg.setFillStyle(0x000000, 1);\r\n            this.tweens.add({\r\n                targets: closeButton,\r\n                scaleX: 1,\r\n                scaleY: 1,\r\n                duration: 200,\r\n                ease: 'Back.easeOut'\r\n            });\r\n        });\r\n\r\n        // Add elements to modal container\r\n        modalContainer.add([modalText, closeButton]);\r\n\r\n        // Store references to difficulty button containers\r\n        const buttonContainers = [];\r\n\r\n        // Show modal with enhanced animation\r\n        helpCircle.on('pointerdown', () => {\r\n            modalContainer.setAlpha(0);\r\n            modalContainer.setScale(0.8);\r\n            overlay.setAlpha(0);\r\n            \r\n            // Disable all difficulty buttons\r\n            buttonContainers.forEach(container => {\r\n                container.removeInteractive();\r\n            });\r\n            \r\n            // Fade in overlay with blur effect\r\n            this.tweens.add({\r\n                targets: overlay,\r\n                alpha: 0.7,\r\n                duration: 300,\r\n                ease: 'Power2'\r\n            });\r\n            \r\n            // Pop in modal with bounce effect\r\n            this.tweens.add({\r\n                targets: modalContainer,\r\n                alpha: 1,\r\n                scaleX: 1,\r\n                scaleY: 1,\r\n                duration: 400,\r\n                ease: 'Back.easeOut',\r\n                easeParams: [2.5]\r\n            });\r\n        });\r\n\r\n        // Hide modal with enhanced animation\r\n        closeButton.on('pointerdown', () => {\r\n            // Fade out overlay\r\n            this.tweens.add({\r\n                targets: overlay,\r\n                alpha: 0,\r\n                duration: 200,\r\n                ease: 'Power2'\r\n            });\r\n            \r\n            // Fade out and scale down modal\r\n            this.tweens.add({\r\n                targets: modalContainer,\r\n                alpha: 0,\r\n                scaleX: 0.8,\r\n                scaleY: 0.8,\r\n                duration: 300,\r\n                ease: 'Back.easeIn',\r\n                onComplete: () => {\r\n                    // Re-enable all difficulty buttons\r\n                    buttonContainers.forEach(container => {\r\n                        container.setInteractive(new Phaser.Geom.Rectangle(\r\n                            -container.first.width * 0.5,\r\n                            -container.first.height * 0.5,\r\n                            container.first.width,\r\n                            container.first.height\r\n                        ), Phaser.Geom.Rectangle.Contains);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        // Initially hide the modal and overlay\r\n        modalContainer.setAlpha(0);\r\n        overlay.setAlpha(0);\r\n\r\n        // Create difficulty selection buttons\r\n        const difficulties = [\r\n            { key: 'easy', text: 'ЛЕСНО', image: 'easy', timeRange: { min: 17, max: 13 } },\r\n            { key: 'medium', text: 'СРЕДНО', image: 'medium', timeRange: { min: 15, max: 10 } },\r\n            { key: 'hard', text: 'ТРУДНО', image: 'balloon', timeRange: { min: 13, max: 8 } }\r\n        ];\r\n\r\n        const buttonSpacing = isMobile ? width * 0.2 : width * 0.18; // Increased spacing for mobile\r\n        const startX = width * 0.30; // Start from 25% of screen width\r\n        const buttonY = height * 0.6; // Fixed Y position for all buttons\r\n\r\n        difficulties.forEach((difficulty, index) => {\r\n            const buttonX = startX + (index * buttonSpacing);\r\n            \r\n            // Create button container\r\n            const buttonContainer = this.add.container(buttonX, buttonY);\r\n            buttonContainers.push(buttonContainer);\r\n            \r\n            // Add difficulty image\r\n            const balloonImage = this.add.image(0, 0, difficulty.image)\r\n                .setScale(0.7)\r\n                .setOrigin(0.5); // Center the balloon origin\r\n            buttonContainer.add(balloonImage);\r\n\r\n            // Add text centered below balloon with more space\r\n            const buttonText = this.add.text(0, balloonImage.height * 0.7, difficulty.text, {\r\n                fontSize: Math.min(width * 0.04, 48) + 'px',\r\n                fontFamily: 'Arial Black',\r\n                fontWeight: 'bold',\r\n                fill: '#fdfdfd',\r\n                stroke: '#4df3ff',\r\n                strokeThickness: 4\r\n            }).setOrigin(0.5);\r\n            buttonContainer.add(buttonText);\r\n\r\n            // Make interactive\r\n            buttonContainer.setInteractive(new Phaser.Geom.Rectangle(\r\n                -balloonImage.width * 0.5,\r\n                -balloonImage.height * 0.5,\r\n                balloonImage.width,\r\n                balloonImage.height\r\n            ), Phaser.Geom.Rectangle.Contains);\r\n\r\n            // Add hover effect\r\n            buttonContainer.on('pointerover', () => {\r\n                this.tweens.add({\r\n                    targets: buttonContainer,\r\n                    scaleX: 1.1,\r\n                    scaleY: 1.1,\r\n                    duration: 100\r\n                });\r\n            });\r\n\r\n            buttonContainer.on('pointerout', () => {\r\n                this.tweens.add({\r\n                    targets: buttonContainer,\r\n                    scaleX: 1,\r\n                    scaleY: 1,\r\n                    duration: 100\r\n                });\r\n            });\r\n\r\n            // Add click handler\r\n            buttonContainer.on('pointerdown', () => {\r\n                this.selectedDifficulty = difficulty;\r\n                this.scene.start('GameScene', { difficulty: difficulty });\r\n            });\r\n        });\r\n\r\n        // Add entrance animations for buttons\r\n        buttonContainers.forEach((container, index) => {\r\n            // Start from below the screen\r\n            container.y = height + 100;\r\n            \r\n            // Animate to final position with delay based on index\r\n            this.tweens.add({\r\n                targets: container,\r\n                y: buttonY,\r\n                duration: 1500,\r\n                ease: 'Back.easeOut',\r\n                delay: 600 + (index * 200) // Stagger the animations\r\n            });\r\n        });\r\n\r\n        // Add green particle effects on the sides\r\n        this.addGreenParticles();\r\n\r\n        // Add entrance animations\r\n        // Separate title and creator text elements\r\n        const titleElements = allTextElements.slice(0, 5); // Title and its glow layers\r\n        const creatorElements = allTextElements.slice(5);   // Creator text and its glow layers\r\n\r\n        // Set initial positions\r\n        titleElements.forEach(text => {\r\n            text.y = height + 100; // Start from below the screen\r\n        });\r\n        \r\n        creatorElements.forEach(text => {\r\n            text.y = height + 150; // Start from below the screen, slightly lower\r\n        });\r\n\r\n        // Animate title elements\r\n        this.tweens.add({\r\n            targets: titleElements,\r\n            y: height * 0.2, // Move to title position\r\n            duration: 1500,\r\n            ease: 'Back.easeOut',\r\n            delay: 200\r\n        });\r\n\r\n        // Animate creator elements\r\n        this.tweens.add({\r\n            targets: creatorElements,\r\n            y: height * 0.2 + titleText.height + 5, // Move to position below title\r\n            duration: 1500,\r\n            ease: 'Back.easeOut',\r\n            delay: 400\r\n        });\r\n    }\r\n\r\n    addGreenParticles() {\r\n        // Add particles on both sides\r\n        const particles = this.add.particles(0, 0, 'balloon', {\r\n            x: { min: 0, max: this.scale.width },\r\n            y: { min: 0, max: this.scale.height },\r\n            quantity: 1,\r\n            frequency: 500,\r\n            scale: { start: 0.1, end: 0 },\r\n            alpha: { start: 0.5, end: 0 },\r\n            tint: 0x00ff00,\r\n            lifespan: 2000,\r\n            gravityY: -50,\r\n            blendMode: 'ADD'\r\n        });\r\n    }\r\n}\r\n\r\n// Main Game Scene\r\nclass GameScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({ key: 'GameScene' });\r\n        this.balloons = [];\r\n        this.lives = 3;\r\n        this.score = 0;\r\n        this.spawnTimer = null;\r\n        this.difficulty = null;\r\n        this.round = 1;\r\n        this.wordSets = [];\r\n        this.mistakeWords = [];\r\n        this.currentWordSet = null;\r\n        this.isLastRound = false;\r\n    }\r\n\r\n    init(data) {\r\n        this.difficulty = data.difficulty || { timeRange: { min: 15, max: 10 } };\r\n        this.baseTime = this.difficulty.timeRange.min;\r\n        this.minTime = this.difficulty.timeRange.max;\r\n    }\r\n\r\n    resetGame() {\r\n        this.balloons = [];\r\n        this.lives = 10;\r\n        this.score = 0;\r\n        this.round = 1;\r\n        this.wordSets = [];\r\n        this.mistakeWords = [];\r\n        this.currentWordSet = null;\r\n        this.isLastRound = false;\r\n        this.clearBalloons();\r\n        if (this.spawnTimer) {\r\n            this.spawnTimer.destroy();\r\n        }\r\n        this.startBalloonSpawning();\r\n    }\r\n\r\n    create() {\r\n        console.log('GameScene create called');\r\n        // Reset game state when starting a new game\r\n        this.resetGame();\r\n        \r\n        // Get words from loaded JSON and create available words array\r\n        this.allWords = this.cache.json.get('wordList');\r\n        this.availableWords = [...this.allWords]; // Create a fresh copy of all words\r\n        console.log(`Loaded ${this.availableWords.length} words from JSON file`);\r\n\r\n        // Add UI\r\n        this.addUI();\r\n        console.log('UI added');\r\n\r\n        // Start balloon spawning with difficulty settings\r\n        this.startBalloonSpawning();\r\n        console.log('Balloon spawning started');\r\n\r\n        // Add click handler\r\n        this.input.on('pointerdown', this.handleClick, this);\r\n        console.log('Click handler added');\r\n    }\r\n\r\n    addUI() {\r\n        const { width, height } = this.scale;\r\n        \r\n        const uiStartX = 10; // Common starting x position for UI elements\r\n        \r\n        // Round counter - positioned in the left corner\r\n        this.roundText = this.add.text(uiStartX, 10, 'Рунд: 1', {\r\n            fontSize: Math.min(width, height) * 0.04 + 'px',\r\n            fill: '#000',\r\n            fontFamily: 'Arial Black',\r\n            fontWeight: 'bold'\r\n        });\r\n\r\n        // Lives display - positioned directly below round counter\r\n        const heartsStartY = this.roundText.y + this.roundText.height + 50;\r\n        this.livesContainer = this.add.container(uiStartX + 30, heartsStartY);\r\n        \r\n        // Create health icons vertically with spacing relative to screen height\r\n        this.healthIcons = [];\r\n        const iconSpacing = height * 0.06;\r\n        const heartWidth = 32; // Base width of the heart image\r\n        const heartScale = Math.min(width, height) * 0.0005;\r\n        const scaledHeartWidth = heartWidth * heartScale;\r\n\r\n        for (let i = 0; i < 10; i++) {\r\n            const healthIcon = this.add.image(0, i * iconSpacing, 'heart');\r\n            healthIcon.setScale(heartScale);\r\n            this.healthIcons.push(healthIcon);\r\n            this.livesContainer.add(healthIcon);\r\n        }\r\n\r\n        // Store the hearts area for balloon spawn calculations\r\n        this.heartsArea = {\r\n            left: uiStartX,\r\n            right: uiStartX + scaledHeartWidth,\r\n            top: heartsStartY,\r\n            bottom: heartsStartY + (iconSpacing * 10)\r\n        };\r\n    }\r\n\r\n    startBalloonSpawning() {\r\n        this.createSpawnTimer();\r\n    }\r\n\r\n    createSpawnTimer() {\r\n        // Clear any existing timer\r\n        if (this.spawnTimer) {\r\n            this.spawnTimer.destroy();\r\n        }\r\n\r\n        // Create a new timer with difficulty-based timing\r\n        this.spawnTimer = this.time.addEvent({\r\n            delay: 1000, // Spawn a new balloon every 2 seconds\r\n            callback: this.spawnBalloons,\r\n            callbackScope: this,\r\n            loop: true\r\n        });\r\n    }\r\n\r\n    spawnBalloons() {\r\n        console.log('Spawning balloons...');\r\n        if (this.lives <= 0) return;\r\n\r\n        // Only spawn new balloons if there are no active balloons\r\n        if (this.balloons.length > 0) {\r\n            return;\r\n        }\r\n\r\n        // Check if we've used all word sets\r\n        if (this.availableWords.length === 0) {\r\n            // Don't start win scene immediately, let the last round play out\r\n            this.isLastRound = true;\r\n            return;\r\n        }\r\n\r\n        const { width, height } = this.scale;\r\n\r\n        // Get random word set from available words and remove it\r\n        const randomIndex = Phaser.Math.Between(0, this.availableWords.length - 1);\r\n        const wordSet = this.availableWords[randomIndex];\r\n        this.availableWords.splice(randomIndex, 1);\r\n        \r\n        // Store the current word set\r\n        this.currentWordSet = wordSet;\r\n\r\n        const correctWords = wordSet.words.filter(word => word !== wordSet.incorrect);\r\n        const incorrectWord = wordSet.incorrect;\r\n\r\n        // Randomly choose which balloon will have the incorrect word\r\n        const incorrectIndex = Phaser.Math.Between(0, 3);\r\n\r\n        // Shuffle the correct words to ensure random selection without duplicates\r\n        const shuffledCorrectWords = Phaser.Utils.Array.Shuffle([...correctWords]);\r\n        \r\n        // Calculate the longest word length in all words\r\n        const maxWordLength = Math.max(\r\n            ...correctWords.map(word => word.length),\r\n            incorrectWord.length\r\n        );\r\n        \r\n        // Calculate current time to reach top based on round\r\n        const timeReduction = Math.floor(this.round / 3) * 0.25;\r\n        const currentTime = Math.max(this.minTime, this.baseTime - timeReduction);\r\n        \r\n        console.log(`Round ${this.round}, Time to top: ${currentTime} seconds`);\r\n\r\n        // Calculate balloon width and total width\r\n        const balloonBaseWidth = Math.min(width, height) * (isMobile ? 0.115 : 0.095); // Increased from 0.095 for mobile\r\n        const balloonWidth = balloonBaseWidth * (1 + (maxWordLength > 5 ? (maxWordLength - 5) * 0.095 : 0));\r\n        \r\n        // Calculate base spacing and adjust it based on word length\r\n        const baseSpacing = width * 0.14; // Increased from 0.13\r\n        const wordLengthSpacingAdjustment = 1 + (maxWordLength > 5 ? (maxWordLength - 5) * 0.06 : 0); // Increased from 0.0525\r\n        const spacing = baseSpacing * wordLengthSpacingAdjustment;\r\n\r\n        // Calculate total width needed\r\n        const totalSpacing = spacing * 3;\r\n        const totalBalloonsWidth = balloonWidth * 4;\r\n        const totalWidth = totalBalloonsWidth + totalSpacing;\r\n\r\n        // Position balloons more to the right\r\n        const minStartX = width * (isMobile ? 0.3 : 0.35); // Adjusted for mobile\r\n        const availableWidth = width * (isMobile ? 0.65 : 0.6); // Adjusted for mobile\r\n        \r\n        // Center the balloons in the available space\r\n        const startX = minStartX + (availableWidth - totalWidth) / 2 + (balloonWidth / 2);\r\n\r\n        const startY = height + 50;\r\n        const endY = -100;\r\n\r\n        // Create a set ID for this group of balloons\r\n        const setID = Date.now();\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            // Add some randomness to positions\r\n            const randomXOffset = Phaser.Math.Between(-width * 0.01, width * 0.01);\r\n            const randomYOffset = Phaser.Math.Between(-height * 0.02, height * 0.02);\r\n            const x = startX + (i * spacing) + randomXOffset;\r\n            const y = startY + randomYOffset;\r\n            \r\n            const isIncorrect = i === incorrectIndex;\r\n            // Use incorrect word for incorrect balloon, or take next word from shuffled array\r\n            const word = isIncorrect ? incorrectWord : shuffledCorrectWords[i >= incorrectIndex ? i - 1 : i];\r\n\r\n            // Calculate scale based on longest word length - increased scaling for mobile\r\n            const baseScale = Math.min(width, height) * (isMobile ? 0.0022 : 0.0018); // Increased from 0.0018 for mobile\r\n            const wordLengthScale = 1 + (maxWordLength > 5 ? (maxWordLength - 5) * 0.06 : 0);\r\n            const balloonScale = baseScale * wordLengthScale;\r\n\r\n            // Create balloon sprite with size relative to screen and longest word length\r\n            const balloon = this.add.sprite(x, y, 'balloon');\r\n            balloon.setScale(balloonScale);\r\n            balloon.setData('word', word);\r\n            balloon.setData('isIncorrect', isIncorrect);\r\n            balloon.setData('setID', setID);\r\n            balloon.setInteractive();\r\n\r\n            // Calculate balloon's dimensions at current scale\r\n            const actualBalloonWidth = balloon.width * balloonScale;\r\n            const actualBalloonHeight = balloon.height * balloonScale;\r\n\r\n            // Calculate text size based on longest word length - adjusted for better readability\r\n            const baseFontSize = Math.min(width, height) * (isMobile ? 0.032 : 0.029); // Increased from 0.029 for mobile\r\n            const fontScale = 1 + (maxWordLength > 5 ? (maxWordLength - 5) * (isMobile ? 0.04 : 0.035) : 0); // Increased scaling for mobile\r\n            const fontSize = Math.floor(baseFontSize * fontScale);\r\n\r\n            // Add word text with improved styling\r\n            const text = this.add.text(x, y, word, {\r\n                fontSize: fontSize + 'px',\r\n                fontFamily: 'Arial, sans-serif',\r\n                fontWeight: 'bold',\r\n                fill: '#000000',\r\n                backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n                padding: { \r\n                    x: isMobile ? fontSize * 0.3 : 0, // Added horizontal padding for mobile\r\n                    y: fontSize * (isMobile ? 0.5 : 0.45) // Increased vertical padding for mobile\r\n                },\r\n                fixedWidth: actualBalloonWidth,\r\n                align: 'center'\r\n            }).setOrigin(0.5);\r\n\r\n            // Position text at balloon's vertical center\r\n            text.y = y - (actualBalloonHeight * 0.05); // Moved closer to the middle\r\n\r\n            // Add a slight shadow effect for better visibility\r\n            text.setShadow(1, 1, 'rgba(0,0,0,0.2)', 2);\r\n\r\n            // Store references\r\n            balloon.setData('text', text);\r\n            this.balloons.push(balloon);\r\n\r\n            // Create tween for synchronized movement\r\n            const targets = [balloon, text];\r\n            const tween = this.tweens.add({\r\n                targets: targets,\r\n                y: endY,\r\n                duration: currentTime * 1000,\r\n                ease: 'Linear',\r\n                onComplete: () => {\r\n                    // Remove balloon and text\r\n                    text.destroy();\r\n                    balloon.destroy();\r\n                    this.balloons = this.balloons.filter(b => b !== balloon);\r\n\r\n                    // Check if this was the last balloon in the set\r\n                    const remainingBalloonsInSet = this.balloons.filter(b => \r\n                        b.getData('setID') === setID\r\n                    );\r\n\r\n                    if (remainingBalloonsInSet.length === 0 && this.currentWordSet) {\r\n                        this.wordSets.push({\r\n                            clicked: null,\r\n                            correct: this.currentWordSet.incorrect,\r\n                            allWords: this.currentWordSet.words\r\n                        });\r\n                        // Increment round when balloons fly out\r\n                        this.round += 1;\r\n                        this.roundText.setText('Рунд: ' + this.round);\r\n                        \r\n                        this.loseLife();\r\n\r\n                        // Check if this was the last round\r\n                        if (this.isLastRound) {\r\n                            this.scene.start('WinScene', { \r\n                                rounds: this.round,\r\n                                wordSets: this.wordSets\r\n                            });\r\n                            return;\r\n                        }\r\n\r\n                        // Spawn new balloons immediately if not the last round\r\n                        this.time.delayedCall(100, () => {\r\n                            this.spawnBalloons();\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Store tween reference\r\n            balloon.setData('tween', tween);\r\n        }\r\n    }\r\n\r\n    clearBalloons() {\r\n        // Clean up existing balloons\r\n        this.balloons.forEach(balloon => {\r\n            const tween = balloon.getData('tween');\r\n            if (tween) tween.stop();\r\n            balloon.getData('text').destroy();\r\n            balloon.destroy();\r\n        });\r\n        this.balloons = [];\r\n    }\r\n\r\n    update() {\r\n        // No need for update check since onComplete handles everything\r\n    }\r\n\r\n    handleClick(pointer) {\r\n        const clickedBalloon = this.balloons.find(balloon => {\r\n            const bounds = new Phaser.Geom.Rectangle(\r\n                balloon.x - (balloon.width * balloon.scaleX) / 2,\r\n                balloon.y - (balloon.height * balloon.scaleY) / 2,\r\n                balloon.width * balloon.scaleX + 60,\r\n                balloon.height * balloon.scaleY + 60\r\n            );\r\n            return bounds.contains(pointer.x, pointer.y);\r\n        });\r\n\r\n        if (clickedBalloon && this.currentWordSet) {\r\n            const isIncorrect = clickedBalloon.getData('isIncorrect');\r\n            const currentSet = {\r\n                clicked: clickedBalloon.getData('word'),\r\n                correct: isIncorrect ? clickedBalloon.getData('word') : this.currentWordSet.incorrect,\r\n                allWords: this.currentWordSet.words\r\n            };\r\n            this.wordSets.push(currentSet);\r\n            \r\n            // Increment round counter for any balloon click\r\n            this.round += 1;\r\n            this.roundText.setText('Рунд: ' + this.round);\r\n            \r\n            if (isIncorrect) {\r\n                // Visual feedback for correct answer\r\n                this.createParticles(clickedBalloon.x, clickedBalloon.y, '#00ff00');\r\n                this.sound.play('success');\r\n            } else {\r\n                this.loseLife();\r\n                this.createParticles(clickedBalloon.x, clickedBalloon.y, '#ff0000');\r\n                this.sound.play('pop');\r\n                // Add the correct word to mistakes list\r\n                this.mistakeWords.push(clickedBalloon.getData('word'));\r\n            }\r\n\r\n            this.createArrowAnimation(pointer, clickedBalloon);\r\n\r\n            // Clear all balloons and set up next spawn\r\n            this.clearBalloons();\r\n            \r\n            // Clear the existing spawn timer\r\n            if (this.spawnTimer) {\r\n                this.spawnTimer.remove();\r\n            }\r\n\r\n            // Check if this was the last round\r\n            if (this.availableWords.length === 0) {\r\n                this.scene.start('WinScene', { \r\n                    rounds: this.round,\r\n                    wordSets: this.wordSets\r\n                });\r\n                return;\r\n            }\r\n\r\n            // Quick spawn after shooting (1 second)\r\n            this.time.delayedCall(1000, () => {\r\n                if (this.lives > 0) {  // Only spawn if still alive\r\n                    this.spawnBalloons();\r\n                    this.createSpawnTimer();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    createParticles(x, y, color) {\r\n        const particles = this.add.particles(0, 0, 'balloon', {\r\n            x: x,\r\n            y: y,\r\n            speed: { min: 100, max: 200 },\r\n            angle: { min: 0, max: 360 },\r\n            scale: { start: 0.2, end: 0 },\r\n            alpha: { start: 0.6, end: 0 },\r\n            lifespan: 500,\r\n            quantity: 10,\r\n            tint: color\r\n        });\r\n\r\n        this.time.delayedCall(500, () => {\r\n            particles.destroy();\r\n        });\r\n    }\r\n\r\n    createArrowAnimation(from, to) {\r\n        // Start arrow from bottom of screen, aligned with the balloon's x position\r\n        const startX = to.x;\r\n        const startY = this.scale.height; // Bottom of the screen\r\n        const arrow = this.add.sprite(startX, startY, 'arrow');\r\n        \r\n        // Calculate angle between bottom position and balloon\r\n        const angle = Phaser.Math.Angle.Between(startX, startY, to.x, to.y);\r\n        arrow.setRotation(angle);\r\n\r\n        this.tweens.add({\r\n            targets: arrow,\r\n            x: to.x,\r\n            y: to.y,\r\n            duration: 200,\r\n            onComplete: () => arrow.destroy()\r\n        });\r\n    }\r\n\r\n    loseLife() {\r\n        this.lives -= 1;\r\n        \r\n        if (this.healthIcons[this.lives]) {\r\n            const icon = this.healthIcons[this.lives];\r\n            icon.setTexture('heart-empty');\r\n            icon.setAlpha(0.3);\r\n            \r\n            this.tweens.add({\r\n                targets: icon,\r\n                x: icon.x + 5,\r\n                duration: 50,\r\n                yoyo: true,\r\n                repeat: 2\r\n            });\r\n        }\r\n\r\n        this.cameras.main.shake(100, 0.005);\r\n\r\n        if (this.lives <= 0) {\r\n            // Clean up before transitioning\r\n            this.clearBalloons();\r\n            if (this.spawnTimer) {\r\n                this.spawnTimer.remove();\r\n            }\r\n            // Stop any ongoing tweens\r\n            this.tweens.killAll();\r\n            \r\n            this.scene.start('GameOverScene', { \r\n                score: this.round,\r\n                wordSets: this.wordSets\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n// Game Over Scene\r\nclass GameOverScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({ key: 'GameOverScene' });\r\n    }\r\n\r\n    init(data) {\r\n        this.score = data.score;\r\n        this.wordSets = data.wordSets || [];\r\n        console.log('GameOverScene initialized with:', {\r\n            score: this.score,\r\n            wordSets: this.wordSets\r\n        });\r\n    }\r\n\r\n    create() {\r\n        const { width, height } = this.scale;\r\n        \r\n        // Add dark overlay\r\n        this.add.rectangle(0, 0, width, height, 0x000000, 0.7)\r\n            .setOrigin(0);\r\n\r\n        // Game over text\r\n        const gameOverText = this.add.text(width / 2, height * 0.15, 'Играта приключи', {\r\n            fontSize: '96px',\r\n            fontFamily: 'Arial Black',\r\n            fill: '#ff0000',\r\n            stroke: '#ffffff',\r\n            strokeThickness: 4, // Reduced from 8\r\n            shadow: { blur: 8, color: '#ff0000', fill: true }, // Reduced blur from 15\r\n            padding: { x: 20, y: 20 }\r\n        }).setOrigin(0.5);\r\n\r\n        // Score text\r\n        const scoreText = this.add.text(width / 2, height * 0.30, `Минати рундове: ${this.score}`, {\r\n            fontSize: '32px',\r\n            fontFamily: 'Arial',\r\n            fill: '#ffffff',\r\n            stroke: '#000000',\r\n            strokeThickness: 4\r\n        }).setOrigin(0.5);\r\n\r\n        // Create scrollable text box\r\n        const textBoxWidth = width * 0.7;\r\n        const textBoxHeight = height * 0.5;\r\n        const textBoxX = width * 0.15;\r\n        const textBoxY = height * 0.35;\r\n\r\n        // Create mask for scrolling\r\n        const maskGraphics = this.add.graphics()\r\n            .fillStyle(0xffffff)\r\n            .fillRect(textBoxX, textBoxY, textBoxWidth - 20, textBoxHeight);\r\n\r\n        // Create a container for masking\r\n        const maskContainer = this.add.container(0, 0);\r\n        maskContainer.setMask(new Phaser.Display.Masks.GeometryMask(this, maskGraphics));\r\n\r\n        // Initialize position variables\r\n        let yPos = textBoxY + 20;\r\n        const availableWidth = textBoxWidth - 80;\r\n\r\n        // Filter only the rounds with mistakes (where clicked is not correct)\r\n        const mistakeRounds = this.wordSets.filter(set => \r\n            set.clicked !== set.correct\r\n        );\r\n\r\n        console.log('Processing mistake rounds:', mistakeRounds.length);\r\n        \r\n        // Create text content\r\n        mistakeRounds.forEach((set) => {\r\n            let xPos = textBoxX + 40;\r\n            let currentLineWidth = 0;\r\n\r\n            set.allWords.forEach((word, wordIndex) => {\r\n                let style = {\r\n                    fontSize: '22px',\r\n                    fontFamily: 'Arial',\r\n                    fill: '#4CAF50' // Softer green for all correct words\r\n                };\r\n\r\n                if (word === set.correct) {\r\n                    style.fill = '#ff0000'; // Red for the incorrect word\r\n                }\r\n\r\n                const wordText = this.add.text(xPos, yPos, word, style);\r\n                maskContainer.add(wordText);\r\n\r\n                if (word === set.clicked) {\r\n                    const underline = this.add.rectangle(\r\n                        xPos,\r\n                        yPos + wordText.height,\r\n                        wordText.width,\r\n                        2,\r\n                        parseInt(style.fill.replace('#', '0x'))\r\n                    );\r\n                    underline.setOrigin(0, 0);\r\n                    maskContainer.add(underline);\r\n                }\r\n\r\n                if (currentLineWidth + wordText.width + 30 > availableWidth && wordIndex > 0) {\r\n                    yPos += 35;\r\n                    xPos = textBoxX + 40;\r\n                    currentLineWidth = 0;\r\n                    wordText.setPosition(xPos, yPos);\r\n                    if (word === set.clicked) {\r\n                        const lastUnderline = maskContainer.list[maskContainer.list.length - 1];\r\n                        if (lastUnderline instanceof Phaser.GameObjects.Rectangle) {\r\n                            lastUnderline.setPosition(xPos, yPos + wordText.height);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                currentLineWidth += wordText.width + 30;\r\n                xPos += wordText.width + 30;\r\n            });\r\n            \r\n            yPos += 45;\r\n        });\r\n\r\n        // If no mistakes were made, show a congratulatory message\r\n        if (mistakeRounds.length === 0) {\r\n            const perfectText = this.add.text(textBoxX + textBoxWidth/2, textBoxY + textBoxHeight/2, \r\n                'Perfect Score!\\nNo mistakes made!', {\r\n                fontSize: '32px',\r\n                fontFamily: 'Arial',\r\n                fill: '#00aa00',\r\n                align: 'center',\r\n                fontWeight: 'bold'\r\n            }).setOrigin(0.5);\r\n            maskContainer.add(perfectText);\r\n        }\r\n\r\n        // Add all text objects to the mask container\r\n        this.children.list\r\n            .filter(child => child instanceof Phaser.GameObjects.Text)\r\n            .forEach(text => {\r\n                if (text !== gameOverText && text !== scoreText) {\r\n                    maskContainer.add(text);\r\n                }\r\n            });\r\n\r\n        // Scrollbar background\r\n        const scrollBarBg = this.add.rectangle(\r\n            textBoxX + textBoxWidth - 20,\r\n            textBoxY,\r\n            20,\r\n            textBoxHeight,\r\n            0xdddddd\r\n        ).setOrigin(0);\r\n\r\n        // Calculate scrollbar height and position\r\n        const contentHeight = yPos - textBoxY;\r\n        const scrollBarHeight = Math.max((textBoxHeight / contentHeight) * textBoxHeight, 50);\r\n        \r\n        // Create scrollbar\r\n        const scrollBar = this.add.rectangle(\r\n            textBoxX + textBoxWidth - 20,\r\n            textBoxY,\r\n            20,\r\n            scrollBarHeight,\r\n            0x666666\r\n        ).setOrigin(0)\r\n            .setInteractive({ draggable: true, useHandCursor: true });\r\n\r\n        // Scrolling logic\r\n        const maxScroll = Math.max(0, contentHeight - textBoxHeight);\r\n        const scrollFactor = maxScroll / (textBoxHeight - scrollBarHeight);\r\n\r\n        // Update scroll position function\r\n        const updateScrollPosition = () => {\r\n            // Ensure scrollbar stays within bounds\r\n            const maxY = textBoxY + textBoxHeight - scrollBarHeight;\r\n            scrollBar.y = Phaser.Math.Clamp(scrollBar.y, textBoxY, maxY);\r\n\r\n            // Update content position\r\n            const scrollPos = (scrollBar.y - textBoxY) * scrollFactor;\r\n            maskContainer.y = -scrollPos;\r\n        };\r\n\r\n        // Drag events\r\n        scrollBar.on('drag', (pointer, dragX, dragY) => {\r\n            scrollBar.y = dragY;\r\n            updateScrollPosition();\r\n        });\r\n\r\n        // Mouse wheel scrolling\r\n        this.input.on('wheel', (pointer, gameObjects, deltaX, deltaY, deltaZ) => {\r\n            if (pointer.x >= textBoxX && pointer.x <= textBoxX + textBoxWidth &&\r\n                pointer.y >= textBoxY && pointer.y <= textBoxY + textBoxHeight) {\r\n                scrollBar.y += deltaY * 0.5;\r\n                updateScrollPosition();\r\n            }\r\n        });\r\n\r\n        // Play Again button\r\n        const playAgainButton = this.add.container(width / 2, height * 0.92);\r\n        \r\n        const buttonBg = this.add.rectangle(0, 0, 200, 60, 0x4444ff, 1)\r\n            .setOrigin(0.5);\r\n        \r\n        const buttonText = this.add.text(0, 0, 'Играй отново', {\r\n            fontSize: '32px',\r\n            fontFamily: 'Arial Black',\r\n            fill: '#ffffff'\r\n        }).setOrigin(0.5);\r\n\r\n        playAgainButton.add([buttonBg, buttonText]);\r\n        playAgainButton.setSize(250, 60);\r\n        buttonBg.setSize(250, 60);\r\n        playAgainButton.setInteractive();\r\n\r\n        // Button hover effects\r\n        playAgainButton.on('pointerover', () => {\r\n            buttonBg.setFillStyle(0x6666ff);\r\n            this.tweens.add({\r\n                targets: playAgainButton,\r\n                scaleX: 1.1,\r\n                scaleY: 1.1,\r\n                duration: 100\r\n            });\r\n        });\r\n\r\n        playAgainButton.on('pointerout', () => {\r\n            buttonBg.setFillStyle(0x4444ff);\r\n            this.tweens.add({\r\n                targets: playAgainButton,\r\n                scaleX: 1,\r\n                scaleY: 1,\r\n                duration: 100\r\n            });\r\n        });\r\n\r\n        playAgainButton.on('pointerdown', () => {\r\n            this.scene.start('GameScene');\r\n        });\r\n    }\r\n}\r\n\r\n// Add new Win Scene\r\nclass WinScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({ key: 'WinScene' });\r\n    }\r\n\r\n    init(data) {\r\n        this.rounds = data.rounds;\r\n        this.wordSets = data.wordSets || [];\r\n    }\r\n\r\n    create() {\r\n        const { width, height } = this.scale;\r\n        \r\n        // Add dark overlay with more transparency\r\n        this.add.rectangle(0, 0, width, height, 0x000000, 0.5)\r\n            .setOrigin(0);\r\n\r\n        // Play win sound\r\n        this.sound.play('win');\r\n\r\n        // Create fireworks emitter first so it's behind everything\r\n        this.createFireworks();\r\n\r\n        // Add victory text with reduced effects\r\n        const winText = this.add.text(width / 2, height * 0.15, 'Поздравления!\\nТи спечели!', {\r\n            fontSize: '96px',   \r\n            fontFamily: 'Arial Black',\r\n            fill: '#4CAF50',\r\n            stroke: '#ffffff',\r\n            strokeThickness: 4,\r\n            align: 'center',\r\n            padding: { x: 20, y: 20 }\r\n        }).setOrigin(0.5);\r\n\r\n        // Create semi-transparent text box\r\n        const textBoxWidth = width * 0.7;\r\n        const textBoxHeight = height * 0.35; // Reduced height\r\n        const textBoxX = width * 0.15;\r\n        const textBoxY = height * 0.45; // Moved down slightly\r\n\r\n        // White background for text box with border and transparency\r\n        const textBoxBg = this.add.rectangle(textBoxX, textBoxY, textBoxWidth, textBoxHeight, 0xffffff)\r\n            .setOrigin(0)\r\n            .setStrokeStyle(2, 0x000000)\r\n            .setAlpha(0.9); // Make it slightly transparent\r\n\r\n        // Create mask for scrolling\r\n        const maskGraphics = this.add.graphics()\r\n            .fillStyle(0xffffff)\r\n            .fillRect(textBoxX, textBoxY, textBoxWidth - 20, textBoxHeight);\r\n\r\n        // Create a container for masking\r\n        const maskContainer = this.add.container(0, 0);\r\n        maskContainer.setMask(new Phaser.Display.Masks.GeometryMask(this, maskGraphics));\r\n\r\n        // Initialize position variables\r\n        let yPos = textBoxY + 20;\r\n        const availableWidth = textBoxWidth - 80;\r\n\r\n        // Filter only the rounds with mistakes\r\n        const mistakeRounds = this.wordSets.filter(set => \r\n            set.clicked !== set.correct\r\n        );\r\n\r\n        // Add \"Words you missed:\" text above the box\r\n        const missedWordsText = this.add.text(textBoxX, textBoxY - 40, 'Объркани думи:', {\r\n            fontSize: '28px',\r\n            fontFamily: 'Arial',\r\n            fill: '#ffffff'\r\n        });\r\n\r\n        if (mistakeRounds.length > 0) {\r\n            mistakeRounds.forEach((set) => {\r\n                let xPos = textBoxX + 40;\r\n                let currentLineWidth = 0;\r\n\r\n                set.allWords.forEach((word, wordIndex) => {\r\n                    let style = {\r\n                        fontSize: '22px',\r\n                        fontFamily: 'Arial',\r\n                        fill: '#4CAF50', // Softer green for all correct words\r\n                        textDecoration: word === set.clicked ? 'underline' : '' // Underline clicked word\r\n                    };\r\n\r\n                    if (word === set.correct) {\r\n                        style.fill = '#ff0000'; // Red for the incorrect word\r\n                    }\r\n\r\n                    const wordText = this.add.text(xPos, yPos, word, style);\r\n\r\n                    if (word === set.clicked) {\r\n                        // Add underline as a rectangle\r\n                        const underline = this.add.rectangle(\r\n                            xPos,\r\n                            yPos + wordText.height,\r\n                            wordText.width,\r\n                            2,\r\n                            parseInt(style.fill.replace('#', '0x'))\r\n                        );\r\n                        underline.setOrigin(0, 0);\r\n                        maskContainer.add(underline);\r\n                    }\r\n\r\n                    if (currentLineWidth + wordText.width + 30 > availableWidth && wordIndex > 0) {\r\n                        yPos += 35;\r\n                        xPos = textBoxX + 40;\r\n                        currentLineWidth = 0;\r\n                        wordText.setPosition(xPos, yPos);\r\n                        if (word === set.clicked) {\r\n                            // Update underline position if word wraps\r\n                            const lastUnderline = maskContainer.list[maskContainer.list.length - 1];\r\n                            if (lastUnderline instanceof Phaser.GameObjects.Rectangle) {\r\n                                lastUnderline.setPosition(xPos, yPos + wordText.height);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    currentLineWidth += wordText.width + 30;\r\n                    xPos += wordText.width + 30;\r\n                    maskContainer.add(wordText);\r\n                });\r\n                \r\n                yPos += 45;\r\n            });\r\n        } else {\r\n            const perfectText = this.add.text(textBoxX + textBoxWidth/2, textBoxY + textBoxHeight/2, \r\n                'Перфектен резултат!\\nНяма грешки!', {\r\n                fontSize: '32px',\r\n                fontFamily: 'Arial',\r\n                fill: '#4CAF50',\r\n                align: 'center',\r\n                fontWeight: 'bold'\r\n            }).setOrigin(0.5);\r\n            maskContainer.add(perfectText);\r\n        }\r\n\r\n        // Add all text objects to the mask container\r\n        this.children.list\r\n            .filter(child => child instanceof Phaser.GameObjects.Text)\r\n            .forEach(text => {\r\n                if (text !== winText && text !== missedWordsText) {\r\n                    maskContainer.add(text);\r\n                }\r\n            });\r\n\r\n        // Add underline for clicked word after creating the mask container\r\n        if (this._clickedWordData) {\r\n            const { text, x, y } = this._clickedWordData;\r\n            const underline = this.add.graphics();\r\n            underline.lineStyle(2, parseInt(text.style.color.replace('#', '0x')), 1);\r\n            underline.beginPath();\r\n            underline.moveTo(x, y + text.height + 2);\r\n            underline.lineTo(x + text.width, y + text.height + 2);\r\n            underline.closePath();\r\n            underline.strokePath();\r\n            maskContainer.add(underline);\r\n            delete this._clickedWordData;\r\n        }\r\n\r\n        // Scrollbar background\r\n        const scrollBarBg = this.add.rectangle(\r\n            textBoxX + textBoxWidth - 20,\r\n            textBoxY,\r\n            20,\r\n            textBoxHeight,\r\n            0xdddddd\r\n        ).setOrigin(0);\r\n\r\n        // Calculate scrollbar height and position\r\n        const contentHeight = yPos - textBoxY;\r\n        const scrollBarHeight = Math.max((textBoxHeight / contentHeight) * textBoxHeight, 50);\r\n        \r\n        // Create scrollbar\r\n        const scrollBar = this.add.rectangle(\r\n            textBoxX + textBoxWidth - 20,\r\n            textBoxY,\r\n            20,\r\n            scrollBarHeight,\r\n            0x666666\r\n        ).setOrigin(0)\r\n            .setInteractive({ draggable: true, useHandCursor: true });\r\n\r\n        // Scrolling logic\r\n        const maxScroll = Math.max(0, contentHeight - textBoxHeight);\r\n        const scrollFactor = maxScroll / (textBoxHeight - scrollBarHeight);\r\n\r\n        // Update scroll position function\r\n        const updateScrollPosition = () => {\r\n            // Ensure scrollbar stays within bounds\r\n            const maxY = textBoxY + textBoxHeight - scrollBarHeight;\r\n            scrollBar.y = Phaser.Math.Clamp(scrollBar.y, textBoxY, maxY);\r\n\r\n            // Update content position\r\n            const scrollPos = (scrollBar.y - textBoxY) * scrollFactor;\r\n            maskContainer.y = -scrollPos;\r\n        };\r\n\r\n        // Drag events\r\n        scrollBar.on('drag', (pointer, dragX, dragY) => {\r\n            scrollBar.y = dragY;\r\n            updateScrollPosition();\r\n        });\r\n\r\n        // Mouse wheel scrolling\r\n        this.input.on('wheel', (pointer, gameObjects, deltaX, deltaY, deltaZ) => {\r\n            if (pointer.x >= textBoxX && pointer.x <= textBoxX + textBoxWidth &&\r\n                pointer.y >= textBoxY && pointer.y <= textBoxY + textBoxHeight) {\r\n                scrollBar.y += deltaY * 0.5;\r\n                updateScrollPosition();\r\n            }\r\n        });\r\n\r\n        // Add styled play again button\r\n        const playAgainButton = this.add.container(width / 2, height * 0.85);\r\n        \r\n        const buttonBg = this.add.rectangle(0, 0, 200, 60, 0x4CAF50, 1)\r\n            .setOrigin(0.5);\r\n        \r\n        const buttonText = this.add.text(0, 0, 'Играй отново', {\r\n            fontSize: '32px',\r\n            fontFamily: 'Arial Black',\r\n            fill: '#ffffff'\r\n        }).setOrigin(0.5);\r\n\r\n        playAgainButton.add([buttonBg, buttonText]);\r\n        playAgainButton.setSize(250, 60);\r\n        buttonBg.setSize(250, 60);\r\n        playAgainButton.setInteractive();\r\n\r\n        // Button hover effects\r\n        playAgainButton.on('pointerover', () => {\r\n            buttonBg.setFillStyle(0x66BB6A);\r\n            this.tweens.add({\r\n                targets: playAgainButton,\r\n                scaleX: 1.1,\r\n                scaleY: 1.1,\r\n                duration: 100\r\n            });\r\n        });\r\n\r\n        playAgainButton.on('pointerout', () => {\r\n            buttonBg.setFillStyle(0x4CAF50);\r\n            this.tweens.add({\r\n                targets: playAgainButton,\r\n                scaleX: 1,\r\n                scaleY: 1,\r\n                duration: 100\r\n            });\r\n        });\r\n\r\n        playAgainButton.on('pointerdown', () => {\r\n            this.scene.start('GameScene');\r\n        });\r\n    }\r\n\r\n    createFireworks() {\r\n        const { width, height } = this.scale;\r\n\r\n        // Simplified colors - fewer options to reduce overhead\r\n        const colors = [\r\n            0xff0000, 0x00ff00, 0x0000ff,     // Primary colors\r\n            0xffff00, 0xff00ff, 0x00ffff      // Secondary colors\r\n        ];\r\n\r\n        // Launch firework function\r\n        const launchFirework = () => {\r\n            // Random position at bottom of screen\r\n            const startX = Phaser.Math.Between(width * 0.2, width * 0.8);\r\n            const startY = height;\r\n\r\n            // Random position for explosion\r\n            const explodeX = Phaser.Math.Between(width * 0.2, width * 0.8);\r\n            const explodeY = Phaser.Math.Between(height * 0.2, height * 0.6);\r\n\r\n            // Random colors\r\n            const color = Phaser.Utils.Array.GetRandom(colors);\r\n\r\n            // Create simpler rocket\r\n            const rocket = this.add.particles(startX, startY, 'balloon', {\r\n                speed: { min: 100, max: 200 },\r\n                scale: { start: 0.3, end: 0.1 },\r\n                lifespan: 300,\r\n                quantity: 1,\r\n                tint: color,\r\n                blendMode: 'ADD',\r\n                emitting: true\r\n            });\r\n\r\n            // Move rocket to explosion point\r\n            this.tweens.add({\r\n                targets: rocket,\r\n                x: explodeX,\r\n                y: explodeY,\r\n                duration: 1000,\r\n                ease: 'Quad.easeOut',\r\n                onComplete: () => {\r\n                    rocket.destroy();\r\n                    \r\n                    // Create explosion\r\n                    const explosion = this.add.particles(explodeX, explodeY, 'balloon', {\r\n                        speed: { min: 200, max: 300 },\r\n                        angle: { min: 0, max: 360 },\r\n                        scale: { start: 0.4, end: 0 },\r\n                        alpha: { start: 1, end: 0 },\r\n                        lifespan: 800,\r\n                        quantity: 30,\r\n                        tint: color,\r\n                        blendMode: 'ADD',\r\n                        emitting: false\r\n                    });\r\n\r\n                    // Emit once and cleanup\r\n                    explosion.start();\r\n                    this.time.delayedCall(800, () => explosion.destroy());\r\n                }\r\n            });\r\n        };\r\n\r\n        // Launch fireworks timer\r\n        const fireworkTimer = this.time.addEvent({\r\n            delay: 600,\r\n            callback: launchFirework,\r\n            callbackScope: this,\r\n            loop: true\r\n        });\r\n\r\n        // Initial fireworks\r\n        for (let i = 0; i < 3; i++) {\r\n            this.time.delayedCall(i * 400, launchFirework, [], this);\r\n        }\r\n\r\n        // Stop fireworks after 6 seconds\r\n        this.time.delayedCall(6000, () => {\r\n            fireworkTimer.destroy();\r\n        });\r\n    }\r\n}\r\n\r\n// Game configuration\r\nconst isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n\r\nconst scaleFactor = window.devicePixelRatio > 1 ? 1.5 : 1;\r\n\r\nconst mobileConfig = {\r\n    type: Phaser.AUTO,\r\n    scale: {\r\n        mode: Phaser.Scale.FIT,\r\n        parent: 'game-container',\r\n        autoCenter: Phaser.Scale.CENTER_BOTH,\r\n        width: window.innerWidth * scaleFactor,\r\n        height: window.innerHeight * scaleFactor\r\n    },\r\n    backgroundColor: '#ffffff',\r\n    physics: {\r\n        default: 'arcade',\r\n        arcade: {\r\n            gravity: { y: 0 },\r\n            debug: false\r\n        }\r\n    },\r\n    scene: [BootScene, MainMenuScene, GameScene, GameOverScene, WinScene]\r\n};\r\n\r\nconst desktopConfig = {\r\n    type: Phaser.AUTO,\r\n    scale: {\r\n        mode: Phaser.Scale.FIT,\r\n        parent: 'game-container',\r\n        autoCenter: Phaser.Scale.CENTER_BOTH,\r\n        width: window.innerWidth || 800,\r\n        height: window.innerHeight || 450,\r\n        min: {\r\n            width: 320,\r\n            height: 180\r\n        },\r\n        max: {\r\n            width: 1920,\r\n            height: 1080\r\n        }\r\n    },\r\n    backgroundColor: '#ffffff',\r\n    physics: {\r\n        default: 'arcade',\r\n        arcade: {\r\n            gravity: { y: 0 },\r\n            debug: false\r\n        }\r\n    },\r\n    scene: [BootScene, MainMenuScene, GameScene, GameOverScene, WinScene]\r\n};\r\n\r\n// Start the game with appropriate config\r\nconsole.log('Initializing game...');\r\nlet game;\r\ntry {\r\n    game = new Phaser.Game(isMobile ? mobileConfig : desktopConfig);\r\n    console.log('Game initialized successfully!');\r\n} catch (error) {\r\n    console.error('Error initializing game:', error);\r\n} "],"names":["BootScene","value","file","MainMenuScene","width","height","bg","scaleX","scaleY","scale","allTextElements","color","alpha","thickness","glowText","titleText","creatorText","helpButtonSize","helpCircle","overlay","modalWidth","isMobile","modalHeight","modalBg","modalContainer","modalText","closeButton","buttonWidth","buttonHeight","closeButtonBg","closeButtonText","buttonContainers","container","difficulties","buttonSpacing","startX","buttonY","difficulty","index","buttonX","buttonContainer","balloonImage","buttonText","titleElements","creatorElements","text","GameScene","data","uiStartX","heartsStartY","iconSpacing","heartWidth","heartScale","scaledHeartWidth","i","healthIcon","randomIndex","wordSet","correctWords","word","incorrectWord","incorrectIndex","shuffledCorrectWords","maxWordLength","timeReduction","currentTime","balloonWidth","baseSpacing","wordLengthSpacingAdjustment","spacing","totalSpacing","totalWidth","minStartX","availableWidth","startY","endY","setID","randomXOffset","randomYOffset","x","y","isIncorrect","baseScale","wordLengthScale","balloonScale","balloon","actualBalloonWidth","actualBalloonHeight","baseFontSize","fontScale","fontSize","targets","tween","b","pointer","clickedBalloon","currentSet","particles","from","to","arrow","angle","icon","GameOverScene","gameOverText","scoreText","textBoxWidth","textBoxHeight","textBoxX","textBoxY","maskGraphics","maskContainer","yPos","mistakeRounds","set","xPos","currentLineWidth","wordIndex","style","wordText","underline","lastUnderline","perfectText","child","contentHeight","scrollBarHeight","scrollBar","scrollFactor","updateScrollPosition","maxY","scrollPos","dragX","dragY","gameObjects","deltaX","deltaY","deltaZ","playAgainButton","buttonBg","WinScene","winText","missedWordsText","colors","launchFirework","explodeX","explodeY","rocket","explosion","fireworkTimer","scaleFactor","mobileConfig","desktopConfig","game","error"],"mappings":"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"}